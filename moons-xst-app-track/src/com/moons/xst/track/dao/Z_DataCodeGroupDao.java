package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_DataCodeGroup;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_DATA_CODE_GROUP.
*/
public class Z_DataCodeGroupDao extends AbstractDao<Z_DataCodeGroup, Void> {

    public static final String TABLENAME = "Z_DATACODEGROUP";

    /**
     * Properties of entity Z_DataCodeGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DataCodeGroup_ID = new Property(0, String.class, "DataCodeGroup_ID", false, "DATACODEGROUP_ID");
        public final static Property Name_TX = new Property(1, String.class, "Name_TX", false, "NAME_TX");
        public final static Property MultiValue_YN = new Property(2, String.class, "MultiValue_YN", false, "MULTIVALUE_YN");
    };


    public Z_DataCodeGroupDao(DaoConfig config) {
        super(config);
    }
    
    public Z_DataCodeGroupDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_DATA_CODE_GROUP' (" + //
                "'DATA_CODE_GROUP_ID' TEXT NOT NULL ," + // 0: DataCodeGroup_ID
                "'NAME_TX' TEXT NOT NULL ," + // 1: Name_TX
                "'MULTI_VALUE_YN' TEXT NOT NULL );"); // 2: MultiValue_YN
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_DATA_CODE_GROUP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_DataCodeGroup entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDataCodeGroup_ID());
        stmt.bindString(2, entity.getName_TX());
        stmt.bindString(3, entity.getMultiValue_YN());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_DataCodeGroup readEntity(Cursor cursor, int offset) {
        Z_DataCodeGroup entity = new Z_DataCodeGroup( //
            cursor.getString(offset + 0), // DataCodeGroup_ID
            cursor.getString(offset + 1), // Name_TX
            cursor.getString(offset + 2) // MultiValue_YN
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_DataCodeGroup entity, int offset) {
        entity.setDataCodeGroup_ID(cursor.getString(offset + 0));
        entity.setName_TX(cursor.getString(offset + 1));
        entity.setMultiValue_YN(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_DataCodeGroup entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_DataCodeGroup entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
