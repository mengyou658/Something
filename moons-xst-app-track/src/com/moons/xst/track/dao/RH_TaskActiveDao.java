package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.RH_TaskActive;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RH_TASK_ACTIVE.
*/
public class RH_TaskActiveDao extends AbstractDao<RH_TaskActive, Void> {

    public static final String TABLENAME = "RH_TASKACTIVE";

    /**
     * Properties of entity RH_TaskActive.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RHTask_ID = new Property(0, String.class, "RHTask_ID", false, "RHTASK_ID");
        public final static Property IDPos_ID = new Property(1, String.class, "IDPos_ID", false, "IDPOS_ID");
        public final static Property SortNo_NR = new Property(2, int.class, "SortNo_NR", false, "SORTNO_NR");
        public final static Property PStart_DT = new Property(3, String.class, "PStart_DT", false, "PSTART_DT");
        public final static Property PEnd_DT = new Property(4, String.class, "PEnd_DT", false, "PEND_DT");
        public final static Property WorkContent_TX = new Property(5, String.class, "WorkContent_TX", false, "WORKCONTENT_TX");
        public final static Property TaskMethod_CD = new Property(6, String.class, "TaskMethod_CD", false, "TASKMETHOD_CD");
        public final static Property Memo_TX = new Property(7, String.class, "Memo_TX", false, "MEMO_TX");
        public final static Property DealWithUser_ID = new Property(8, Integer.class, "DealWithUser_ID", false, "DEALWITHUSER_ID");
        public final static Property DealWith_DT = new Property(9, String.class, "DealWith_DT", false, "DEALWITH_DT");
    };


    public RH_TaskActiveDao(DaoConfig config) {
        super(config);
    }
    
    public RH_TaskActiveDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RH_TASK_ACTIVE' (" + //
                "'RHTASK_ID' TEXT NOT NULL ," + // 0: RHTask_ID
                "'IDPOS_ID' TEXT," + // 1: IDPos_ID
                "'SORT_NO_NR' INTEGER NOT NULL ," + // 2: SortNo_NR
                "'PSTART_DT' TEXT NOT NULL ," + // 3: PStart_DT
                "'PEND_DT' TEXT NOT NULL ," + // 4: PEnd_DT
                "'WORK_CONTENT_TX' TEXT," + // 5: WorkContent_TX
                "'TASK_METHOD_CD' TEXT NOT NULL ," + // 6: TaskMethod_CD
                "'MEMO_TX' TEXT," + // 7: Memo_TX
                "'DEAL_WITH_USER_ID' INTEGER," + // 8: DealWithUser_ID
                "'DEAL_WITH_DT' TEXT);"); // 9: DealWith_DT
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RH_TASK_ACTIVE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RH_TaskActive entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getRHTask_ID());
 
        String IDPos_ID = entity.getIDPos_ID();
        if (IDPos_ID != null) {
            stmt.bindString(2, IDPos_ID);
        }
        stmt.bindLong(3, entity.getSortNo_NR());
        stmt.bindString(4, entity.getPStart_DT());
        stmt.bindString(5, entity.getPEnd_DT());
 
        String WorkContent_TX = entity.getWorkContent_TX();
        if (WorkContent_TX != null) {
            stmt.bindString(6, WorkContent_TX);
        }
        stmt.bindString(7, entity.getTaskMethod_CD());
 
        String Memo_TX = entity.getMemo_TX();
        if (Memo_TX != null) {
            stmt.bindString(8, Memo_TX);
        }
 
        Integer DealWithUser_ID = entity.getDealWithUser_ID();
        if (DealWithUser_ID != null) {
            stmt.bindLong(9, DealWithUser_ID);
        }
 
        String DealWith_DT = entity.getDealWith_DT();
        if (DealWith_DT != null) {
            stmt.bindString(10, DealWith_DT);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RH_TaskActive readEntity(Cursor cursor, int offset) {
        RH_TaskActive entity = new RH_TaskActive( //
            cursor.getString(offset + 0), // RHTask_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // IDPos_ID
            cursor.getInt(offset + 2), // SortNo_NR
            cursor.getString(offset + 3), // PStart_DT
            cursor.getString(offset + 4), // PEnd_DT
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // WorkContent_TX
            cursor.getString(offset + 6), // TaskMethod_CD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Memo_TX
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // DealWithUser_ID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // DealWith_DT
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RH_TaskActive entity, int offset) {
        entity.setRHTask_ID(cursor.getString(offset + 0));
        entity.setIDPos_ID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSortNo_NR(cursor.getInt(offset + 2));
        entity.setPStart_DT(cursor.getString(offset + 3));
        entity.setPEnd_DT(cursor.getString(offset + 4));
        entity.setWorkContent_TX(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaskMethod_CD(cursor.getString(offset + 6));
        entity.setMemo_TX(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDealWithUser_ID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDealWith_DT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RH_TaskActive entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RH_TaskActive entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
