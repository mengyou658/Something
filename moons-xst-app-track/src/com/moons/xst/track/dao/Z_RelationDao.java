package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_Relation;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_RELATION.
*/
public class Z_RelationDao extends AbstractDao<Z_Relation, Void> {

    public static final String TABLENAME = "Z_RELATION";

    /**
     * Properties of entity Z_Relation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Int_ID = new Property(0, String.class, "Int_ID", false, "INT_ID");
        public final static Property String_ID = new Property(1, String.class, "String_ID", false, "STRING_ID");
        public final static Property RelationType = new Property(2, String.class, "RelationType", false, "RELATIONTYPE");
        public final static Property Expand_TX = new Property(3, String.class, "Expand_TX", false, "EXPAND_TX");
    };


    public Z_RelationDao(DaoConfig config) {
        super(config);
    }
    
    public Z_RelationDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_RELATION' (" + //
                "'INT_ID' TEXT NOT NULL ," + // 0: Int_ID
                "'STRING_ID' TEXT NOT NULL ," + // 1: String_ID
                "'RELATIONTYPE' TEXT NOT NULL ," + // 2: RelationType
                "'EXPAND_TX' TEXT);"); // 3: Expand_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_RELATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_Relation entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getInt_ID());
        stmt.bindString(2, entity.getString_ID());
        stmt.bindString(3, entity.getRelationType());
 
        String Expand_TX = entity.getExpand_TX();
        if (Expand_TX != null) {
            stmt.bindString(4, Expand_TX);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_Relation readEntity(Cursor cursor, int offset) {
        Z_Relation entity = new Z_Relation( //
            cursor.getString(offset + 0), // Int_ID
            cursor.getString(offset + 1), // String_ID
            cursor.getString(offset + 2), // RelationType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Expand_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_Relation entity, int offset) {
        entity.setInt_ID(cursor.getString(offset + 0));
        entity.setString_ID(cursor.getString(offset + 1));
        entity.setRelationType(cursor.getString(offset + 2));
        entity.setExpand_TX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_Relation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_Relation entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
