package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.ComDaoSession;
import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.GPSMobjectBugResultForFiles;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GPSMOBJECT_BUG_RESULT_FOR_FILES.
 */
public class GPSMobjectBugResultForFilesDao extends
		AbstractDao<GPSMobjectBugResultForFiles, String> {

	public static final String TABLENAME = "GPSMOBJECTBUGRESULTFORFILES";

	/**
	 * Properties of entity GPSMobjectBugResultForFiles.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Result_ID = new Property(0, String.class,
				"Result_ID", false, "RESULT_ID");
		public final static Property GUID = new Property(1, String.class,
				"GUID", true, "GUID");
		public final static Property File_DT = new Property(2, String.class,
				"File_DT", false, "FILE_DT");
		public final static Property File_Type = new Property(3, String.class,
				"File_Type", false, "FILE_TYPE");
	};

	public GPSMobjectBugResultForFilesDao(DaoConfig config) {
		super(config);
	}

	public GPSMobjectBugResultForFilesDao(DaoConfig config,
			DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	public GPSMobjectBugResultForFilesDao(DaoConfig config,
			ComDaoSession daoSession) {
		super(config, daoSession);
	}
	
	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint
				+ "GPSMOBJECTBUGRESULTFORFILES (" + //
				"RESULT_ID nvarchar(20) NOT NULL ," + // 0: Result_ID
				"GUID nvarchar(100) PRIMARY KEY NOT NULL ," + // 1: GUID
				"FILE_DT datetime NOT NULL ," + // 2: File_DT
				"FILE_TYPE nvarchar(5) NOT NULL );"); // 3: File_Type
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'GPSMOBJECT_BUG_RESULT_FOR_FILES'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt,
			GPSMobjectBugResultForFiles entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getResult_ID());
		stmt.bindString(2, entity.getGUID());
		stmt.bindString(3, entity.getFile_DT());
		stmt.bindString(4, entity.getFile_Type());
	}

	/** @inheritdoc */
	@Override
	public String readKey(Cursor cursor, int offset) {
		return cursor.getString(offset + 1);
	}

	/** @inheritdoc */
	@Override
	public GPSMobjectBugResultForFiles readEntity(Cursor cursor, int offset) {
		GPSMobjectBugResultForFiles entity = new GPSMobjectBugResultForFiles( //
				cursor.getString(offset + 0), // Result_ID
				cursor.getString(offset + 1), // GUID
				cursor.getString(offset + 2), // File_DT
				cursor.getString(offset + 3) // File_Type
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, GPSMobjectBugResultForFiles entity,
			int offset) {
		entity.setResult_ID(cursor.getString(offset + 0));
		entity.setGUID(cursor.getString(offset + 1));
		entity.setFile_DT(cursor.getString(offset + 2));
		entity.setFile_Type(cursor.getString(offset + 3));
	}

	/** @inheritdoc */
	@Override
	protected String updateKeyAfterInsert(GPSMobjectBugResultForFiles entity,
			long rowId) {
		return entity.getGUID();
	}

	/** @inheritdoc */
	@Override
	public String getKey(GPSMobjectBugResultForFiles entity) {
		if (entity != null) {
			return entity.getGUID();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * 加载数据（供实时上传）
	 * 
	 * @param loadcount
	 * @return
	 */
	public List<GPSMobjectBugResultForFiles> loadforUploadJIT(String bugID) {
		String sqlString = "select * from GPSMOBJECTBUGRESULTFORFILES where RESULT_ID ='"
				+ bugID + "'";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}
	
	
	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */
	public boolean deleteUploadedData(List<GPSMobjectBugResultForFiles> uploadedData) {
		try {
			for (GPSMobjectBugResultForFiles bugResultFi : uploadedData) {
				deleteDatabyCondition(bugResultFi.getGUID());
			}
		} catch(Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public void deleteDatabyCondition(String _ID) {
		String sql = "delete from GPSMOBJECTBUGRESULTFORFILES where GUID ='" + _ID
				+ "'";
		db.execSQL(sql);
	}
}
