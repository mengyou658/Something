package com.moons.xst.track.dao;

import java.util.List;

import com.moons.xst.sqlite.WorkBillSession;
import com.moons.xst.sqlite.WorkResultSession;
import com.moons.xst.track.bean.Work_Bill;
import com.moons.xst.track.common.StringUtils;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table WORK_BILL.
 */
public class Work_BillDao extends AbstractDao<Work_Bill, Integer> {

	public static final String TABLENAME = "Work_Bill";

	/**
	 * Properties of entity Work_Bill.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Work_Bill_ID = new Property(0,
				Integer.class, "Work_Bill_ID", true, "Work_Bill_ID");
		public final static Property Work_Bill_Code = new Property(1,
				String.class, "Work_Bill_Code", false, "Work_Bill_Code");
		public final static Property Work_Begin_Time = new Property(2,
				String.class, "Work_Begin_Time", false, "Work_Begin_Time");
		public final static Property Work_End_Time = new Property(3,
				String.class, "Work_End_Time", false, "Work_End_Time");
		public final static Property Tache_ID = new Property(4, Integer.class,
				"Tache_ID", false, "Tache_ID");
		public final static Property JD_ID = new Property(5, Integer.class,
				"JD_ID", false, "JD_ID");
		public final static Property Work_Bill_Type_TX = new Property(6,
				String.class, "Work_Bill_Type_TX", false, "Work_Bill_Type_TX");
		public final static Property Work_Bill_TaskContent_TX = new Property(7,
				String.class, "Work_Bill_TaskContent_TX", false,
				"Work_Bill_TaskContent_TX");
		public final static Property Work_Bill_Memo_TX = new Property(8,
				String.class, "Work_Bill_Memo_TX", false, "Work_Bill_Memo_TX");
		public final static Property Work_Bill_Operator = new Property(9,
				String.class, "Work_Bill_Operator", false, "Work_Bill_Operator");
		public final static Property Work_Bill_Guardian = new Property(10,
				String.class, "Work_Bill_Guardian", false, "Work_Bill_Guardian");
		public final static Property Work_Bill_Watch = new Property(11,
				String.class, "Work_Bill_Watch", false, "Work_Bill_Watch");
		public final static Property Work_Bill_Duty = new Property(12,
				String.class, "Work_Bill_Duty", false, "Work_Bill_Duty");
		public final static Property ID_CD = new Property(13, String.class,
				"ID_CD", false, "ID_CD");
		public final static Property Place_TX = new Property(14, String.class,
				"Place_TX", false, "Place_TX");
	};

	public Work_BillDao(DaoConfig config) {
		super(config);
	}

	public Work_BillDao(DaoConfig config, WorkBillSession daoSession) {
		super(config, daoSession);
	}

	public Work_BillDao(DaoConfig config, WorkResultSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'WORK_BILL' (" + //
				"'Work_Bill_ID' Integer PRIMARY KEY NOT NULL ," + // 0:
																	// Work_Bill_ID
				"'Work_Bill_Code' TEXT," + // 1: Work_Bill_Code
				"'Work_Begin_Time' TEXT," + // 2: Work_Begin_Time
				"'Work_End_Time' TEXT," + // 3: Work_End_Time
				"'Tache_ID' INTEGER," + // 4: Tache_ID
				"'JD_ID' INTEGER," + // 5: JD_ID
				"'Work_Bill_Type_TX' TEXT," + // 6: Work_Bill_Type_TX
				"'Work_Bill_TaskContent_TX' TEXT," + // 7:
														// Work_Bill_TaskContent_TX
				"'Work_Bill_Memo_TX' TEXT," + // 8: Work_Bill_Memo_TX
				"'Work_Bill_Operator' TEXT," + // 9: Work_Bill_Operator
				"'Work_Bill_Guardian' TEXT," + // 10: Work_Bill_Guardian
				"'Work_Bill_Watch' TEXT," + // 11: Work_Bill_Watch
				"'Work_Bill_Duty' TEXT," + // 12: Work_Bill_Duty
				"'ID_CD' TEXT," + // 13: ID_CD
				"'Place_TX' TEXT);"); // 14: Place_TX
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'WORK_BILL'";
		db.execSQL(sql);
	}

	// 查询工作票
	public List<Work_Bill> selectWork(int workId) {
		String sql = "SELECT * from Work_Bill WHERE Work_Bill_ID ='" + workId
				+ "'";
		Cursor cursor = db.rawQuery(sql, null);
		return loadAllAndCloseCursor(cursor);
	}

	// 修改工作票状态
	public void updateState(int workId) {
		String sql = "update Work_Bill set JD_ID='1' WHERE Work_Bill_ID='"
				+ workId + "'";
		db.execSQL(sql);
	}

	// 保存许可人信息
	public void savePrincipal(int workId, String name, String OperatorName) {
		String sql = "update Work_Bill set Work_Bill_Operator='" + OperatorName
				+ "', Work_Bill_Guardian='" + name
				+ "',JD_ID='2' WHERE Work_Bill_ID='" + workId + "'";
		db.execSQL(sql);
	}

	// 还原工作票
	public void restoreWork(int workId) {
		String sql = "update Work_Bill set JD_ID='0',Work_Bill_Operator=null,Work_Bill_Guardian=null WHERE Work_Bill_ID='"
				+ workId + "'";
		db.execSQL(sql);
	}

	// 插入数据到结果库
	public void insertWorkResult(Work_Bill entity) {
		String sql = "insert into WORK_BILL(Work_Bill_ID,Work_Bill_Code,Work_Begin_Time,Work_End_Time,Tache_ID,JD_ID,Work_Bill_Type_TX,Work_Bill_TaskContent_TX,Work_Bill_Memo_TX,Work_Bill_Operator,Work_Bill_Guardian,Work_Bill_Watch,Work_Bill_Duty,ID_CD,Place_TX) values ('"
				+ entity.getWork_Bill_ID()
				+ "','"
				+ entity.getWork_Bill_Code()
				+ "','"
				+ entity.getWork_Begin_Time()
				+ "','"
				+ entity.getWork_End_Time()
				+ "','"
				+ entity.getTache_ID()
				+ "','"
				+ entity.getJD_ID()
				+ "','"
				+ entity.getWork_Bill_Type_TX()
				+ "','"
				//+ entity.getWork_Bill_TaskContent_TX() //回传时，上位机不需要工作票内容，为防止上位机在编制时添加特殊字符，下位机不保存此字段。
				+ "','"
				+ entity.getWork_Bill_Memo_TX()
				+ "','"
				+ isEmpty(entity.getWork_Bill_Operator())
				+ "','"
				+ isEmpty(entity.getWork_Bill_Guardian())
				+ "','"
				+ isEmpty(entity.getWork_Bill_Watch())
				+ "','"
				+ isEmpty(entity.getWork_Bill_Duty())
				+ "','"
				+ entity.getID_CD() + "','" + entity.getPlace_TX() + "')";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Work_Bill entity) {
		stmt.clearBindings();
		stmt.bindLong(1, entity.getWork_Bill_ID());

		String Work_Bill_Code = entity.getWork_Bill_Code();
		if (Work_Bill_Code != null) {
			stmt.bindString(2, Work_Bill_Code);
		}

		String Work_Begin_Time = entity.getWork_Begin_Time();
		if (Work_Begin_Time != null) {
			stmt.bindString(3, Work_Begin_Time);
		}

		String Work_End_Time = entity.getWork_End_Time();
		if (Work_End_Time != null) {
			stmt.bindString(4, Work_End_Time);
		}

		Integer Tache_ID = entity.getTache_ID();
		if (Tache_ID != null) {
			stmt.bindLong(5, Tache_ID);
		}

		Integer JD_ID = entity.getJD_ID();
		if (JD_ID != null) {
			stmt.bindLong(6, JD_ID);
		}

		String Work_Bill_Type_TX = entity.getWork_Bill_Type_TX();
		if (Work_Bill_Type_TX != null) {
			stmt.bindString(7, Work_Bill_Type_TX);
		}

		String Work_Bill_TaskContent_TX = entity.getWork_Bill_TaskContent_TX();
		if (Work_Bill_TaskContent_TX != null) {
			stmt.bindString(8, Work_Bill_TaskContent_TX);
		}

		String Work_Bill_Memo_TX = entity.getWork_Bill_Memo_TX();
		if (Work_Bill_Memo_TX != null) {
			stmt.bindString(9, Work_Bill_Memo_TX);
		}

		String Work_Bill_Operator = entity.getWork_Bill_Operator();
		if (Work_Bill_Operator != null) {
			stmt.bindString(10, Work_Bill_Operator);
		}

		String Work_Bill_Guardian = entity.getWork_Bill_Guardian();
		if (Work_Bill_Guardian != null) {
			stmt.bindString(11, Work_Bill_Guardian);
		}

		String Work_Bill_Watch = entity.getWork_Bill_Watch();
		if (Work_Bill_Watch != null) {
			stmt.bindString(12, Work_Bill_Watch);
		}

		String Work_Bill_Duty = entity.getWork_Bill_Duty();
		if (Work_Bill_Duty != null) {
			stmt.bindString(13, Work_Bill_Duty);
		}

		String ID_CD = entity.getID_CD();
		if (ID_CD != null) {
			stmt.bindString(14, ID_CD);
		}

		String Place_TX = entity.getPlace_TX();
		if (Place_TX != null) {
			stmt.bindString(15, Place_TX);
		}
	}

	/** @inheritdoc */
	@Override
	public Integer readKey(Cursor cursor, int offset) {
		return cursor.getInt(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Work_Bill readEntity(Cursor cursor, int offset) {
		Work_Bill entity = new Work_Bill(
				//
				cursor.getInt(offset + 0), // Work_Bill_ID
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Work_Bill_Code
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Work_Begin_Time
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Work_End_Time
				cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Tache_ID
				cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // JD_ID
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Work_Bill_Type_TX
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Work_Bill_TaskContent_TX
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Work_Bill_Memo_TX
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Work_Bill_Operator
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // Work_Bill_Guardian
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // Work_Bill_Watch
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // Work_Bill_Duty
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // ID_CD
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14) // Place_TX
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Work_Bill entity, int offset) {
		entity.setWork_Bill_ID(cursor.getInt(offset + 0));
		entity.setWork_Bill_Code(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setWork_Begin_Time(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setWork_End_Time(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setTache_ID(cursor.isNull(offset + 4) ? null : cursor
				.getInt(offset + 4));
		entity.setJD_ID(cursor.isNull(offset + 5) ? null : cursor
				.getInt(offset + 5));
		entity.setWork_Bill_Type_TX(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setWork_Bill_TaskContent_TX(cursor.isNull(offset + 7) ? null
				: cursor.getString(offset + 7));
		entity.setWork_Bill_Memo_TX(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setWork_Bill_Operator(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setWork_Bill_Guardian(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setWork_Bill_Watch(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setWork_Bill_Duty(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setID_CD(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setPlace_TX(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
	}

	/** @inheritdoc */
	@Override
	protected Integer updateKeyAfterInsert(Work_Bill entity, long rowId) {
		return entity.getWork_Bill_ID();
	}

	/** @inheritdoc */
	@Override
	public Integer getKey(Work_Bill entity) {
		if (entity != null) {
			return entity.getWork_Bill_ID();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String isEmpty(String value) {
		return StringUtils.isEmpty(value) ? "" : value;
	}

}
