package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.GPSMobjectBugResultForFiles;
import com.moons.xst.track.bean.GPSMobjectBugResultForFilesHis;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GPSMOBJECT_BUG_RESULT_FOR_FILES_HIS.
*/
public class GPSMobjectBugResultForFilesHisDao extends AbstractDao<GPSMobjectBugResultForFilesHis, String> {

    public static final String TABLENAME = "GPSMOBJECTBUGRESULTFORFILESHIS";

    /**
     * Properties of entity GPSMobjectBugResultForFilesHis.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Result_ID = new Property(0, String.class, "Result_ID", false, "RESULT_ID");
        public final static Property GUID = new Property(1, String.class, "GUID", true, "GUID");
        public final static Property File_DT = new Property(2, String.class, "File_DT", false, "FILE_DT");
        public final static Property File_Type = new Property(3, String.class, "File_Type", false, "FILE_TYPE");
    };


    public GPSMobjectBugResultForFilesHisDao(DaoConfig config) {
        super(config);
    }
    
    public GPSMobjectBugResultForFilesHisDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPSMOBJECT_BUG_RESULT_FOR_FILES_HIS' (" + //
                "'RESULT_ID' TEXT NOT NULL ," + // 0: Result_ID
                "'GUID' TEXT PRIMARY KEY NOT NULL ," + // 1: GUID
                "'FILE_DT' TEXT NOT NULL ," + // 2: File_DT
                "'FILE_TYPE' TEXT NOT NULL );"); // 3: File_Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPSMOBJECT_BUG_RESULT_FOR_FILES_HIS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GPSMobjectBugResultForFilesHis entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getResult_ID());
        stmt.bindString(2, entity.getGUID());
        stmt.bindString(3, entity.getFile_DT());
        stmt.bindString(4, entity.getFile_Type());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public GPSMobjectBugResultForFilesHis readEntity(Cursor cursor, int offset) {
        GPSMobjectBugResultForFilesHis entity = new GPSMobjectBugResultForFilesHis( //
            cursor.getString(offset + 0), // Result_ID
            cursor.getString(offset + 1), // GUID
            cursor.getString(offset + 2), // File_DT
            cursor.getString(offset + 3) // File_Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GPSMobjectBugResultForFilesHis entity, int offset) {
        entity.setResult_ID(cursor.getString(offset + 0));
        entity.setGUID(cursor.getString(offset + 1));
        entity.setFile_DT(cursor.getString(offset + 2));
        entity.setFile_Type(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GPSMobjectBugResultForFilesHis entity, long rowId) {
        return entity.getGUID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GPSMobjectBugResultForFilesHis entity) {
        if(entity != null) {
            return entity.getGUID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    public long insertGPSMobjectBugResultForFiles(GPSMobjectBugResultForFiles entity) {
    	GPSMobjectBugResultForFilesHis entityhis = new GPSMobjectBugResultForFilesHis();
    	entityhis.setResult_ID(entity.getResult_ID());
    	entityhis.setGUID(entity.getGUID());
    	entityhis.setFile_DT(entity.getFile_DT());
    	entityhis.setFile_Type(entity.getFile_Type());
    	return this.insert(entityhis);
    }
    
}
