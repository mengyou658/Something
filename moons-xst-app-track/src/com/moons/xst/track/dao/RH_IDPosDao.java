package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.RH_IDPos;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RH_IDPOS.
*/
public class RH_IDPosDao extends AbstractDao<RH_IDPos, Void> {

    public static final String TABLENAME = "RH_IDPOS";

    /**
     * Properties of entity RH_IDPos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IDPos_ID = new Property(0, String.class, "IDPos_ID", false, "IDPOS_ID");
        public final static Property ID_CD = new Property(1, String.class, "ID_CD", false, "ID_CD");
        public final static Property IDPos_CD = new Property(2, String.class, "IDPos_CD", false, "IDPOS_CD");
        public final static Property Place_TX = new Property(3, String.class, "Place_TX", false, "PLACE_TX");
        public final static Property Type_CD = new Property(4, String.class, "Type_CD", false, "TYPE_CD");
        public final static Property Sort_NR = new Property(5, int.class, "Sort_NR", false, "SORT_NR");
        public final static Property Awake_YN = new Property(6, String.class, "Awake_YN", false, "AWAKE_YN");
        public final static Property OnlyDW_YN = new Property(7, String.class, "OnlyDW_YN", false, "ONLYDW_YN");
        public final static Property Order_YN = new Property(8, String.class, "Order_YN", false, "ORDER_YN");
        public final static Property PreIDPos_ID = new Property(9, String.class, "PreIDPos_ID", false, "PREIDPOS_ID");
        public final static Property CostDateLimit_NR = new Property(10, Integer.class, "CostDateLimit_NR", false, "COSTDATELIMIT_NR");
        public final static Property Cycle_ID = new Property(11, Integer.class, "Cycle_ID", false, "CYCLE_ID");
        public final static Property CycleBaseDate_DT = new Property(12, String.class, "CycleBaseDate_DT", false, "CYCLEBASEDATE_DT");
        public final static Property LastArrivedTime_DT = new Property(13, String.class, "LastArrivedTime_DT", false, "LASTARRIVEDTIME_DT");
        public final static Property TransInfo_TX = new Property(14, String.class, "TransInfo_TX", false, "TRANSINFO_TX");
    };


    public RH_IDPosDao(DaoConfig config) {
        super(config);
    }
    
    public RH_IDPosDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RH_IDPOS' (" + //
                "'IDPOS_ID' TEXT NOT NULL ," + // 0: IDPos_ID
                "'ID_CD' TEXT NOT NULL ," + // 1: ID_CD
                "'IDPOS_CD' TEXT," + // 2: IDPos_CD
                "'PLACE_TX' TEXT NOT NULL ," + // 3: Place_TX
                "'TYPE_CD' TEXT NOT NULL ," + // 4: Type_CD
                "'SORT_NR' INTEGER NOT NULL ," + // 5: Sort_NR
                "'AWAKE_YN' TEXT," + // 6: Awake_YN
                "'ONLY_DW_YN' TEXT," + // 7: OnlyDW_YN
                "'ORDER_YN' TEXT," + // 8: Order_YN
                "'PRE_IDPOS_ID' TEXT," + // 9: PreIDPos_ID
                "'COST_DATE_LIMIT_NR' INTEGER," + // 10: CostDateLimit_NR
                "'CYCLE_ID' INTEGER," + // 11: Cycle_ID
                "'CYCLE_BASE_DATE_DT' TEXT," + // 12: CycleBaseDate_DT
                "'LAST_ARRIVED_TIME_DT' TEXT," + // 13: LastArrivedTime_DT
                "'TRANS_INFO_TX' TEXT);"); // 14: TransInfo_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RH_IDPOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RH_IDPos entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIDPos_ID());
        stmt.bindString(2, entity.getID_CD());
 
        String IDPos_CD = entity.getIDPos_CD();
        if (IDPos_CD != null) {
            stmt.bindString(3, IDPos_CD);
        }
        stmt.bindString(4, entity.getPlace_TX());
        stmt.bindString(5, entity.getType_CD());
        stmt.bindLong(6, entity.getSort_NR());
 
        String Awake_YN = entity.getAwake_YN();
        if (Awake_YN != null) {
            stmt.bindString(7, Awake_YN);
        }
 
        String OnlyDW_YN = entity.getOnlyDW_YN();
        if (OnlyDW_YN != null) {
            stmt.bindString(8, OnlyDW_YN);
        }
 
        String Order_YN = entity.getOrder_YN();
        if (Order_YN != null) {
            stmt.bindString(9, Order_YN);
        }
 
        String PreIDPos_ID = entity.getPreIDPos_ID();
        if (PreIDPos_ID != null) {
            stmt.bindString(10, PreIDPos_ID);
        }
 
        Integer CostDateLimit_NR = entity.getCostDateLimit_NR();
        if (CostDateLimit_NR != null) {
            stmt.bindLong(11, CostDateLimit_NR);
        }
 
        Integer Cycle_ID = entity.getCycle_ID();
        if (Cycle_ID != null) {
            stmt.bindLong(12, Cycle_ID);
        }
 
        String CycleBaseDate_DT = entity.getCycleBaseDate_DT();
        if (CycleBaseDate_DT != null) {
            stmt.bindString(13, CycleBaseDate_DT);
        }
 
        String LastArrivedTime_DT = entity.getLastArrivedTime_DT();
        if (LastArrivedTime_DT != null) {
            stmt.bindString(14, LastArrivedTime_DT);
        }
 
        String TransInfo_TX = entity.getTransInfo_TX();
        if (TransInfo_TX != null) {
            stmt.bindString(15, TransInfo_TX);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RH_IDPos readEntity(Cursor cursor, int offset) {
        RH_IDPos entity = new RH_IDPos( //
            cursor.getString(offset + 0), // IDPos_ID
            cursor.getString(offset + 1), // ID_CD
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IDPos_CD
            cursor.getString(offset + 3), // Place_TX
            cursor.getString(offset + 4), // Type_CD
            cursor.getInt(offset + 5), // Sort_NR
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Awake_YN
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // OnlyDW_YN
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Order_YN
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // PreIDPos_ID
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // CostDateLimit_NR
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Cycle_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CycleBaseDate_DT
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // LastArrivedTime_DT
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // TransInfo_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RH_IDPos entity, int offset) {
        entity.setIDPos_ID(cursor.getString(offset + 0));
        entity.setID_CD(cursor.getString(offset + 1));
        entity.setIDPos_CD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlace_TX(cursor.getString(offset + 3));
        entity.setType_CD(cursor.getString(offset + 4));
        entity.setSort_NR(cursor.getInt(offset + 5));
        entity.setAwake_YN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOnlyDW_YN(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrder_YN(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPreIDPos_ID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCostDateLimit_NR(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCycle_ID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCycleBaseDate_DT(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastArrivedTime_DT(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTransInfo_TX(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RH_IDPos entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RH_IDPos entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
