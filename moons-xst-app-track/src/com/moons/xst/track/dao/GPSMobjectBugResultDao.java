package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.ComDaoSession;
import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.GPSMobjectBugResult;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GPSMOBJECT_BUG_RESULT.
 */
public class GPSMobjectBugResultDao extends
		AbstractDao<GPSMobjectBugResult, Void> {

	public static final String TABLENAME = "GPSMOBJECTBUGRESULT";

	/**
	 * Properties of entity GPSMobjectBugResult.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Result_ID = new Property(0, String.class,
				"Result_ID", false, "RESULT_ID");
		public final static Property Type_ID = new Property(1, int.class,
				"Type_ID", false, "TYPE_ID");
		public final static Property GZDM_ID = new Property(2, int.class,
				"GZDM_ID", false, "GZDM_ID");
		public final static Property ZZDM_ID = new Property(3, int.class,
				"ZZDM_ID", false, "ZZDM_ID");
		public final static Property YYDM_ID = new Property(4, int.class,
				"YYDM_ID", false, "YYDM_ID");
		public final static Property CSDM_ID = new Property(5, int.class,
				"CSDM_ID", false, "CSDM_ID");
		public final static Property GPSPoint_ID = new Property(6, int.class,
				"GPSPoint_ID", false, "GPSPOINT_ID");
		public final static Property BugMemo_TX = new Property(7, String.class,
				"BugMemo_TX", false, "BUGMEMO_TX");
		public final static Property Find_TM = new Property(8, String.class,
				"Find_TM", false, "FIND_TM");
		public final static Property Post_ID = new Property(9, int.class,
				"Post_ID", false, "POST_ID");
		public final static Property FindUser_TX = new Property(10,
				String.class, "FindUser_TX", false, "FINDUSER_TX");
		public final static Property Longitude = new Property(11, String.class,
				"Longitude", false, "LONGITUDE");
		public final static Property Latitude = new Property(12, String.class,
				"Latitude", false, "LATITUDE");
        public final static Property EventType_ID = new Property(13, String.class, "EventType_ID", false, "EVENTTYPE_ID");
        public final static Property EventName_TX = new Property(14, String.class, "EventName_TX", false, "EVENTNAME_TX");
        public final static Property SBPost_ID = new Property(15, String.class, "SBPost_ID", false, "SBPOST_ID");
        public final static Property GX_ID = new Property(16, String.class, "GX_ID", false, "GX_ID");
        public final static Property GXName_TX = new Property(17, String.class, "GXName_TX", false, "GXNAME_TX");
        public final static Property EventPlace_TX = new Property(18, String.class, "EventPlace_TX", false, "EVENTPLACE_TX");
        public final static Property EventStatus_ID = new Property(19, String.class, "EventStatus_ID", false, "EVENTSTATUS_ID");
        public final static Property SBType_ID = new Property(20, String.class, "SBType_ID", false, "SBTYPE_ID");
	};

	public GPSMobjectBugResultDao(DaoConfig config) {
		super(config);
	}

	public GPSMobjectBugResultDao(DaoConfig config,
			DJResultDAOSession daoSession) {
		super(config, daoSession);
	}
	
	public GPSMobjectBugResultDao(DaoConfig config,
			ComDaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "GPSMOBJECTBUGRESULT (" + //
				"RESULT_ID nvarchar(20) NOT NULL ," + // RESult_ID
				"TYPE_ID INTEGER NOT NULL ," + // 0: Type_ID
				"GZDM_ID INTEGER NOT NULL ," + // 1: GZDM_ID
				"ZZDM_ID INTEGER NOT NULL ," + // 2: ZZDM_ID
				"YYDM_ID INTEGER NOT NULL ," + // 3: YYDM_ID
				"CSDM_ID INTEGER NOT NULL ," + // 4: CSDM_ID
				"GPSPOINT_ID INTEGER NOT NULL ," + // 5: GPSPoint_ID
				"BUGMEMO_TX nvarchar(1000)," + // 6: BugMemo_TX
				"FIND_TM datetime NOT NULL ," + // 7: Find_TM
				"POST_ID INTEGER NOT NULL ," + // 8: Post_ID
				"FINDUSER_TX nvarchar(40) NOT NULL ," + // 9: FindUser_TX
				"LONGITUDE nvarchar(150) NOT NULL ," + // 10: Longitude
				"LATITUDE nvarchar(150) NOT NULL ,"+ // 12: Latitude
                "'EVENTTYPE_ID' TEXT," + // 13: EventType_ID
                "'EVENTNAME_TX' TEXT," + // 14: EventName_TX
                "'SBPOST_ID' TEXT," + // 15: SBPost_ID
                "'GX_ID' TEXT," + // 16: GX_ID
                "'GXNAME_TX' TEXT," + // 17: GXName_TX
                "'EVENTPLACE_TX' TEXT," + // 18: EventPlac_TX
                "'EVENTSTATUS_ID' TEXT," + // 19: EventStatus_ID
                "'SBTYPE_ID' TEXT);"); // 20: SBType_ID
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'GPSMOBJECTBUGRESULT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, GPSMobjectBugResult entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getResult_ID());
		stmt.bindLong(2, entity.getType_ID());
		stmt.bindLong(3, entity.getGZDM_ID());
		stmt.bindLong(4, entity.getZZDM_ID());
		stmt.bindLong(5, entity.getYYDM_ID());
		stmt.bindLong(6, entity.getCSDM_ID());
		stmt.bindLong(7, entity.getGPSPoint_ID());

		String BugMemo_TX = entity.getBugMemo_TX();
		if (BugMemo_TX != null) {
			stmt.bindString(8, BugMemo_TX);
		}
		stmt.bindString(9, entity.getFind_TM());
		stmt.bindLong(10, entity.getPost_ID());
		stmt.bindString(11, entity.getFindUser_TX());
		stmt.bindString(12, entity.getLongitude());
		stmt.bindString(13, entity.getLatitude());
		String EventType_ID = entity.getEventType_ID();
        if (EventType_ID != null) {
            stmt.bindString(14, EventType_ID);
        }
 
        String EventName_TX = entity.getEventName_TX();
        if (EventName_TX != null) {
            stmt.bindString(15, EventName_TX);
        }
 
        String SBPost_ID = entity.getSBPost_ID();
        if (SBPost_ID != null) {
            stmt.bindString(16, SBPost_ID);
        }
 
        String GX_ID = entity.getGX_ID();
        if (GX_ID != null) {
            stmt.bindString(17, GX_ID);
        }
 
        String GXName_TX = entity.getGXName_TX();
        if (GXName_TX != null) {
            stmt.bindString(18, GXName_TX);
        }
 
        String EventPlac_TX = entity.getEventPlace_TX();
        if (EventPlac_TX != null) {
            stmt.bindString(19, EventPlac_TX);
        }
 
        String EventStatus_ID = entity.getEventStatus_ID();
        if (EventStatus_ID != null) {
            stmt.bindString(20, EventStatus_ID);
        }
 
        String SBType_ID = entity.getSBType_ID();
        if (SBType_ID != null) {
            stmt.bindString(21, SBType_ID);
        }
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public GPSMobjectBugResult readEntity(Cursor cursor, int offset) {
		GPSMobjectBugResult entity = new GPSMobjectBugResult(
				//
				cursor.getString(offset + 0), // Result_ID
				cursor.getInt(offset + 1), // Type_ID
				cursor.getInt(offset + 2), // GZDM_ID
				cursor.getInt(offset + 3), // ZZDM_ID
				cursor.getInt(offset + 4), // YYDM_ID
				cursor.getInt(offset + 5), // CSDM_ID
				cursor.getInt(offset + 6), // GPSPoint_ID
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // BugMemo_TX
				cursor.getString(offset + 8), // Find_TM
				cursor.getInt(offset + 9), // Post_ID
				cursor.getString(offset + 10), // FindUser_TX
				cursor.getString(offset + 11), // Longitude
				cursor.getString(offset + 12), // Latitude
				cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // EventType_ID
				cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // EventName_TX
				cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SBPost_ID
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // GX_ID
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // GXName_TX
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // EventPlac_TX
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // EventStatus_ID
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // SBType_ID
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, GPSMobjectBugResult entity, int offset) {
		entity.setResult_ID(cursor.getString(offset + 0));
		entity.setType_ID(cursor.getInt(offset + 1));
		entity.setGZDM_ID(cursor.getInt(offset + 2));
		entity.setZZDM_ID(cursor.getInt(offset + 3));
		entity.setYYDM_ID(cursor.getInt(offset + 4));
		entity.setCSDM_ID(cursor.getInt(offset + 5));
		entity.setGPSPoint_ID(cursor.getInt(offset + 6));
		entity.setBugMemo_TX(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setFind_TM(cursor.getString(offset + 8));
		entity.setPost_ID(cursor.getInt(offset + 9));
		entity.setFindUser_TX(cursor.getString(offset + 10));
		entity.setLongitude(cursor.getString(offset + 11));
		entity.setLatitude(cursor.getString(offset + 12));
        entity.setEventType_ID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEventName_TX(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSBPost_ID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGX_ID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setGXName_TX(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEventPlace_TX(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEventStatus_ID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSBType_ID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(GPSMobjectBugResult entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(GPSMobjectBugResult entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * 加载数据（供实时上传）
	 * 
	 * @param loadcount
	 * @return
	 */
	public List<GPSMobjectBugResult> loadforUploadJIT(int loadcount) {
		String sqlString = "select * from GPSMOBJECTBUGRESULT order by FIND_TM asc limit 0,"
				+ loadcount;
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */
	public boolean deleteUploadedData(List<GPSMobjectBugResult> uploadedData) {
		try {
			for (GPSMobjectBugResult bugResult : uploadedData) {
				deleteDatabyCondition(bugResult.getResult_ID());
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public void deleteDatabyCondition(String _ID) {
		String sql = "delete from GPSMOBJECTBUGRESULT where RESULT_ID ='" + _ID
				+ "'";
		db.execSQL(sql);
	}
}
