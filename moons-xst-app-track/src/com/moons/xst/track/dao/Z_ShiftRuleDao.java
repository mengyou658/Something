package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_ShiftRule;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_SHIFT_RULE.
*/
public class Z_ShiftRuleDao extends AbstractDao<Z_ShiftRule, Void> {

    public static final String TABLENAME = "Z_SHIFTRULE";

    /**
     * Properties of entity Z_ShiftRule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Work_DT = new Property(0, String.class, "Work_DT", false, "WORK_DT");
        public final static Property Shift_CD = new Property(1, String.class, "Shift_CD", false, "SHIFT_CD");
        public final static Property ShiftGroup_CD = new Property(2, String.class, "ShiftGroup_CD", false, "SHIFTGROUP_CD");
    };


    public Z_ShiftRuleDao(DaoConfig config) {
        super(config);
    }
    
    public Z_ShiftRuleDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_SHIFT_RULE' (" + //
                "'WORK_DT' TEXT NOT NULL ," + // 0: Work_DT
                "'SHIFT_CD' TEXT NOT NULL ," + // 1: Shift_CD
                "'SHIFT_GROUP_CD' TEXT NOT NULL );"); // 2: ShiftGroup_CD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_SHIFT_RULE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_ShiftRule entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getWork_DT());
        stmt.bindString(2, entity.getShift_CD());
        stmt.bindString(3, entity.getShiftGroup_CD());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_ShiftRule readEntity(Cursor cursor, int offset) {
        Z_ShiftRule entity = new Z_ShiftRule( //
            cursor.getString(offset + 0), // Work_DT
            cursor.getString(offset + 1), // Shift_CD
            cursor.getString(offset + 2) // ShiftGroup_CD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_ShiftRule entity, int offset) {
        entity.setWork_DT(cursor.getString(offset + 0));
        entity.setShift_CD(cursor.getString(offset + 1));
        entity.setShiftGroup_CD(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_ShiftRule entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_ShiftRule entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
