package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.TempMeasureDaoSession;
import com.moons.xst.track.bean.TempMeasureBaseInfo;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

//THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
* DAO for table TEMPMEASUREBASEINFO.
*/
public class TempMeasureBaseInfoDao extends AbstractDao<TempMeasureBaseInfo, Void> {
	
	public static final String TABLENAME = "TEMPMEASUREBASEINFO";
	
	/**
	 * Properties of entity TempMeasureBaseInfo.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property GUID = new Property(0, String.class,
				"GUID", true, "GUID");
		public final static Property FileName = new Property(1, String.class,
				"FileName", false, "FILENAME");
		public final static Property CreateTime = new Property(2, String.class,
				"CreateTime", false, "CREATIME");
		public final static Property MeasureType = new Property(3, String.class,
				"MeasureType", false, "MEASURETYPE");
		public final static Property Expand1 = new Property(4, String.class, 
				"Expand1", false, "EXPAND1");
		public final static Property Expand2 = new Property(5, String.class, 
				"Expand2", false, "EXPAND2");
		public final static Property Expand3 = new Property(6, String.class, 
				"Expand3", false, "EXPAND3");
		public final static Property Expand4 = new Property(7, String.class, 
				"Expand4", false, "EXPAND4");
		public final static Property Expand5 = new Property(8, String.class, 
				"Expand5", false, "EXPAND5");
	};

	public TempMeasureBaseInfoDao(DaoConfig config) {
		super(config);
	}

	public TempMeasureBaseInfoDao(DaoConfig config, TempMeasureDaoSession daoSession) {
		super(config, daoSession);
	}
	
	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "TEMPMEASUREBASEINFO (" + //
				"GUID nvarchar(100) NOT NULL PRIMARY KEY ," + // 0: GUID
				"FILENAME nvarchar(500) NOT NULL," + // 1: FILENAME
				"CREATIME datetime NOT NULL," + // 2: CREATETIME
				"MEASURETYPE nvarchar(50) NOT NULL," + // 3: MEASURETYPE
				"EXPAND1 nvarchar(100)," + // 4: EXPAND1
				"EXPAND2 nvarchar(100)," + // 5: EXPAND2
				"EXPAND3 nvarchar(100)," + // 6: EXPAND3
				"EXPAND4 nvarchar(100)," + // 7: EXPAND4
				"EXPAND5 nvarchar(100)" + //  8: EXPAND5
				")");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'TEMPMEASUREBASEINFO'";
		db.execSQL(sql);
	}
	
	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, TempMeasureBaseInfo entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getGUID());
		stmt.bindString(2, entity.getFileName());
		stmt.bindString(3, entity.getCreateTime());
		stmt.bindString(4, entity.getMeasureType());
		
		String EXPAND1 = entity.getExpand1();
		if (EXPAND1 != null) {
			stmt.bindString(5, EXPAND1);
		}
		
		String EXPAND2 = entity.getExpand2();
		if (EXPAND2 != null) {
			stmt.bindString(6, EXPAND2);
		}
		
		String EXPAND3 = entity.getExpand3();
		if (EXPAND3 != null) {
			stmt.bindString(7, EXPAND3);
		}
		
		String EXPAND4 = entity.getExpand4();
		if (EXPAND4 != null) {
			stmt.bindString(8, EXPAND4);
		}
		
		String EXPAND5 = entity.getExpand5();
		if (EXPAND5 != null) {
			stmt.bindString(9, EXPAND5);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}
	
	/** @inheritdoc */
	@Override
	public TempMeasureBaseInfo readEntity(Cursor cursor, int offset) {
		TempMeasureBaseInfo entity = new TempMeasureBaseInfo(
				//
				cursor.getString(offset + 0), // GUID
				cursor.getString(offset + 1), // FILENAME
				cursor.getString(offset + 2), // CREATETIME
				cursor.getString(offset + 3), // MEASURETYPE
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // EXPAND1
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EXPAND2
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EXPAND3
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // EXPAND4
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // EXPAND5
			);
		return entity;
	}
	
	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, TempMeasureBaseInfo entity, int offset) {
		entity.setGUID(cursor.getString(offset + 0));
		entity.setFileName(cursor.getString(offset + 1));
		entity.setCreateTime(cursor.getString(offset + 2));
		entity.setMeasureType(cursor.getString(offset + 3));
		entity.setExpand1(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setExpand2(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setExpand3(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setExpand4(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setExpand5(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(TempMeasureBaseInfo entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(TempMeasureBaseInfo entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/** @inheritdoc */
	public long InsertTempMeasureBaseInfo(TempMeasureBaseInfo entity) {
		long row = insert(entity);
		return row;
	}

	public void Operatesql(String sql) {
		SQLiteDatabase db = getDatabase();

		db.execSQL(sql);
	}
}