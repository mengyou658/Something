package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.baidu.navisdk.util.common.StringUtils;
import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.AppConst;
import com.moons.xst.track.bean.Z_DJ_Plan;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table Z_DJ_PLAN.
 */
public class Z_DJ_PlanDao extends AbstractDao<Z_DJ_Plan, Void> {

	public static final String TABLENAME = "Z_DJ_PLAN";

	/**
	 * Properties of entity Z_DJ_Plan.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property DJ_Plan_ID = new Property(0, String.class,
				"DJ_Plan_ID", false, "DJ_PLAN_ID");
		public final static Property PlanDesc_TX = new Property(1,
				String.class, "PlanDesc_TX", false, "PLANDESC_TX");
		public final static Property SortNo_NR = new Property(2, int.class,
				"SortNo_NR", false, "SORTNO_NR");
		public final static Property ESTStandard_TX = new Property(3,
				String.class, "ESTStandard_TX", false, "ESTSTANDARD_TX");
		public final static Property DataType_CD = new Property(4,
				String.class, "DataType_CD", false, "DATATYPE_CD");
		public final static Property ZhenDong_Type = new Property(5,
				String.class, "ZhenDong_Type", false, "ZHENDONG_TYPE");
		public final static Property ZhenDong_PP = new Property(6,
				String.class, "ZhenDong_PP", false, "ZHENDONG_PP");
		public final static Property Cycle_ID = new Property(7, Integer.class,
				"Cycle_ID", false, "CYCLE_ID");
		public final static Property CycleBaseDate_DT = new Property(8,
				String.class, "CycleBaseDate_DT", false, "CYCLEBASEDATE_DT");
		public final static Property IDPos_ID = new Property(9, String.class,
				"IDPos_ID", false, "IDPOS_ID");
		public final static Property CheckMethod = new Property(10, int.class,
				"CheckMethod", false, "CHECKMETHOD");
		public final static Property AlarmType_ID = new Property(11,
				Integer.class, "AlarmType_ID", false, "ALARMTYPE_ID");
		public final static Property LowerLimit1_TX = new Property(12,
				String.class, "LowerLimit1_TX", false, "LOWERLIMIT1_TX");
		public final static Property LowerLimit2_TX = new Property(13,
				String.class, "LowerLimit2_TX", false, "LOWERLIMIT2_TX");
		public final static Property LowerLimit3_TX = new Property(14,
				String.class, "LowerLimit3_TX", false, "LOWERLIMIT3_TX");
		public final static Property LowerLimit4_TX = new Property(15,
				String.class, "LowerLimit4_TX", false, "LOWERLIMIT4_TX");
		public final static Property UpperLimit1_TX = new Property(16,
				String.class, "UpperLimit1_TX", false, "UPPERLIMIT1_TX");
		public final static Property UpperLimit2_TX = new Property(17,
				String.class, "UpperLimit2_TX", false, "UPPERLIMIT2_TX");
		public final static Property UpperLimit3_TX = new Property(18,
				String.class, "UpperLimit3_TX", false, "UPPERLIMIT3_TX");
		public final static Property UpperLimit4_TX = new Property(19,
				String.class, "UpperLimit4_TX", false, "UPPERLIMIT4_TX");
		public final static Property MetricUnit_TX = new Property(20,
				String.class, "MetricUnit_TX", false, "METRICUNIT_TX");
		public final static Property StandardValue_TX = new Property(21,
				String.class, "StandardValue_TX", false, "STANDARDVALUE_TX");
		public final static Property ParmLowerLimit_TX = new Property(22,
				String.class, "ParmLowerLimit_TX", false, "PARMLOWERLIMIT_TX");
		public final static Property ParmUpperLimit_TX = new Property(23,
				String.class, "ParmUpperLimit_TX", false, "PARMUPPERLIMIT_TX");
		public final static Property DataCodeGroup_ID = new Property(24,
				Integer.class, "DataCodeGroup_ID", false, "DATACODEGROUP_ID");
		public final static Property MustCheck_YN = new Property(25,
				String.class, "MustCheck_YN", false, "MUSTCHECK_YN");
		public final static Property SpecCase_YN = new Property(26,
				String.class, "SpecCase_YN", false, "SPECCASE_YN");
		public final static Property SpecCase_TX = new Property(27,
				String.class, "SpecCase_TX", false, "SPECCASE_TX");
		public final static Property WenDu_FSL = new Property(28, Float.class,
				"WenDu_FSL", false, "WENDU_FSL");
		public final static Property DisStart_TM = new Property(29,
				String.class, "DisStart_TM", false, "DISSTART_TM");
		public final static Property DisEnd_TM = new Property(30, String.class,
				"DisEnd_TM", false, "DISEND_TM");
		public final static Property LKPoint_ID = new Property(31,
				String.class, "LKPoint_ID", false, "LKPOINT_ID");
		public final static Property SRPoint_ID = new Property(32,
				String.class, "SRPoint_ID", false, "SRPOINT_ID");
		public final static Property MObjectState_TX = new Property(33,
				String.class, "MObjectState_TX", false, "MOBJECTSTATE_TX");
		public final static Property DefaultResult_TX = new Property(34,
				String.class, "DefaultResult_TX", false, "DEFAULTRESULT_TX");
		public final static Property MobjectBugSpec_ID = new Property(35,
				Integer.class, "MobjectBugSpec_ID", false, "MOBJECTBUGSPEC_ID");
		public final static Property SensorRatio_TX = new Property(36,
				String.class, "SensorRatio_TX", false, "SENSORRATIO_TX");
		public final static Property LastResult_TX = new Property(37,
				String.class, "LastResult_TX", false, "LASTRESULT_TX");
		public final static Property WARNINGVALUE_NR = new Property(38,
				Float.class, "WARNINGVALUE_NR", false, "WARNINGVALUE_NR");
		public final static Property LastComplete_DT = new Property(39,
				String.class, "LastComplete_DT", false, "LASTCOMPLETE_DT");
		public final static Property TransInfo_TX = new Property(40,
				String.class, "TransInfo_TX", false, "TRANSINFO_TX");
		public final static Property ConLevel_TX = new Property(41,
				String.class, "ConLevel_TX", false, "CONLEVEL_TX");
		public final static Property PlanCycleIDsStr_TX = new Property(42,
				String.class, "PlanCycleIDsStr_TX", false, "PLANCYCLEIDSSTR_TX");
		public final static Property GroupNum_NR = new Property(43,
				String.class, "GroupNum_NR", false, "GROUPNUM_NR");
		public final static Property MaxFreq_NR = new Property(44,
				Integer.class, "MaxFreq_NR", false, "MAXFREQ_NR");
		public final static Property FFTLine_NR = new Property(45,
				Integer.class, "FFTLine_NR", false, "FFTLINE_NR");
		public final static Property WindowType_NR = new Property(46,
				Integer.class, "WindowType_NR", false, "WINDOWTYPE_NR");
		public final static Property AverNum_NR = new Property(47,
				Integer.class, "AverNum_NR", false, "AVERNUM_NR");
		public final static Property Speed_YN = new Property(48, String.class,
				"Speed_YN", false, "SPEED_YN");
		public final static Property AverageType_NR = new Property(49,
				Integer.class, "AverageType_NR", false, "AVERAGETYPE_NR");
		public final static Property Overlap_NR = new Property(50,
				Integer.class, "Overlap_NR", false, "OVERLAP_NR");
	};

	public Z_DJ_PlanDao(DaoConfig config) {
		super(config);
	}

	public Z_DJ_PlanDao(DaoConfig config, DJDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'Z_DJ_PLAN' (" + //
				"'DJ_PLAN_ID' TEXT NOT NULL ," + // 0: DJ_Plan_ID
				"'PLANDESC_TX' TEXT NOT NULL ," + // 1: PlanDesc_TX
				"'SORTNO_NR' INTEGER NOT NULL ," + // 2: SortNo_NR
				"'ESTSTANDARD_TX' TEXT," + // 3: ESTStandard_TX
				"'DATATYPE_CD' TEXT," + // 4: DataType_CD
				"'ZHENDONG_TYPE' TEXT," + // 5: ZhenDong_Type
				"'ZHENDONG_PP' TEXT," + // 6: ZhenDong_PP
				"'CYCLE_ID' INTEGER," + // 7: Cycle_ID
				"'CYCLEBASEDATE_DT' TEXT," + // 8: CycleBaseDate_DT
				"'IDPOS_ID' TEXT," + // 9: IDPos_ID
				"'CHECKMETHOD' INTEGER NOT NULL ," + // 10: CheckMethod
				"'ALARMTYPE_ID' INTEGER," + // 11: AlarmType_ID
				"'LOWERLIMIT1_TX' TEXT," + // 12: LowerLimit1_TX
				"'LOWERLIMIT2_TX' TEXT," + // 13: LowerLimit2_TX
				"'LOWERLIMIT3_TX' TEXT," + // 14: LowerLimit3_TX
				"'LOWERLIMIT4_TX' TEXT," + // 15: LowerLimit4_TX
				"'UPPERLIMIT1_TX' TEXT," + // 16: UpperLimit1_TX
				"'UPPERLIMIT2_TX' TEXT," + // 17: UpperLimit2_TX
				"'UPPERLIMIT3_TX' TEXT," + // 18: UpperLimit3_TX
				"'UPPERLIMIT4_TX' TEXT," + // 19: UpperLimit4_TX
				"'METRICUNIT_TX' TEXT," + // 20: MetricUnit_TX
				"'STANDARD_VALUE_TX' TEXT," + // 21: StandardValue_TX
				"'PARMLOWERLIMIT_TX' TEXT," + // 22: ParmLowerLimit_TX
				"'PARMUPPERLIMIT_TX' TEXT," + // 23: ParmUpperLimit_TX
				"'DATACODEGROUP_ID' INTEGER," + // 24: DataCodeGroup_ID
				"'MUSTCHECK_YN' TEXT NOT NULL ," + // 25: MustCheck_YN
				"'SPECCASE_YN' TEXT," + // 26: SpecCase_YN
				"'SPECCASE_TX' TEXT," + // 27: SpecCase_TX
				"'WENDU_FSL' REAL," + // 28: WenDu_FSL
				"'DISSTART_TM' TEXT," + // 29: DisStart_TM
				"'DISEND_TM' TEXT," + // 30: DisEnd_TM
				"'LKPOINT_ID' TEXT," + // 31: LKPoint_ID
				"'SRPOINT_ID' TEXT," + // 32: SRPoint_ID
				"'MOBJECTSTATE_TX' TEXT," + // 33: MObjectState_TX
				"'DEFAULTRESULT_TX' TEXT," + // 34: DefaultResult_TX
				"'MOBJECTBUGSPEC_ID' INTEGER," + // 35: MobjectBugSpec_ID
				"'SENSORRATIO_TX' TEXT," + // 36: SensorRatio_TX
				"'LASTRESULT_TX' TEXT," + // 37: LastResult_TX
				"'WARNINGVALUE_NR' REAL," + // 38: WARNINGVALUE_NR
				"'LASTCOMPLETE_DT' TEXT," + // 39: LastComplete_DT
				"'TRANSINFO_TX' TEXT," + // 40: TransInfo_TX
				"'CONLEVEL_TX' TEXT," + // 41: ConLevel_TX
				"'PLANCYCLEIDSSTR_TX' TEXT," + // 42: PlanCycleIDsStr_TX
				"'GROUPNUM_NR' TEXT," + // 43: GroupNum_NR
				"'MAXFREQ_NR' INTEGER," + // 44: MaxFreq_NR
				"'FFTLINE_NR' INTEGER," + // 45: FFTLine_NR
				"'WINDOWTYPE_NR' INTEGER," + // 46: WindowType_NR
				"'AVERNUM_NR' INTEGER," + // 47: AverNum_NR
				"'SPEED_YN' TEXT," + // 48: Speed_YN
				"'AVERAGETYPE_NR' INTEGER," + // 49: AverageType_NR
				"'OVERLAP_NR' INTEGER);"); // 50: Overlap_NR
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'Z_DJ_PLAN'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Z_DJ_Plan entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getDJ_Plan_ID());
		stmt.bindString(2, entity.getPlanDesc_TX());
		stmt.bindLong(3, entity.getSortNo_NR());

		String ESTStandard_TX = entity.getESTStandard_TX();
		if (ESTStandard_TX != null) {
			stmt.bindString(4, ESTStandard_TX);
		}

		String DataType_CD = entity.getDataType_CD();
		if (DataType_CD != null) {
			stmt.bindString(5, DataType_CD);
		}

		String ZhenDong_Type = entity.getZhenDong_Type();
		if (ZhenDong_Type != null) {
			stmt.bindString(6, ZhenDong_Type);
		}

		String ZhenDong_PP = entity.getZhenDong_PP();
		if (ZhenDong_PP != null) {
			stmt.bindString(7, ZhenDong_PP);
		}

		Integer Cycle_ID = entity.getCycle_ID();
		if (Cycle_ID != null) {
			stmt.bindLong(8, Cycle_ID);
		}

		String CycleBaseDate_DT = entity.getCycleBaseDate_DT();
		if (CycleBaseDate_DT != null) {
			stmt.bindString(9, CycleBaseDate_DT);
		}

		String IDPos_ID = entity.getIDPos_ID();
		if (IDPos_ID != null) {
			stmt.bindString(10, IDPos_ID);
		}
		stmt.bindLong(11, entity.getCheckMethod());

		Integer AlarmType_ID = entity.getAlarmType_ID();
		if (AlarmType_ID != null) {
			stmt.bindLong(12, AlarmType_ID);
		}

		String LowerLimit1_TX = entity.getLowerLimit1_TX();
		if (LowerLimit1_TX != null) {
			stmt.bindString(13, LowerLimit1_TX);
		}

		String LowerLimit2_TX = entity.getLowerLimit2_TX();
		if (LowerLimit2_TX != null) {
			stmt.bindString(14, LowerLimit2_TX);
		}

		String LowerLimit3_TX = entity.getLowerLimit3_TX();
		if (LowerLimit3_TX != null) {
			stmt.bindString(15, LowerLimit3_TX);
		}

		String LowerLimit4_TX = entity.getLowerLimit4_TX();
		if (LowerLimit4_TX != null) {
			stmt.bindString(16, LowerLimit4_TX);
		}

		String UpperLimit1_TX = entity.getUpperLimit1_TX();
		if (UpperLimit1_TX != null) {
			stmt.bindString(17, UpperLimit1_TX);
		}

		String UpperLimit2_TX = entity.getUpperLimit2_TX();
		if (UpperLimit2_TX != null) {
			stmt.bindString(18, UpperLimit2_TX);
		}

		String UpperLimit3_TX = entity.getUpperLimit3_TX();
		if (UpperLimit3_TX != null) {
			stmt.bindString(19, UpperLimit3_TX);
		}

		String UpperLimit4_TX = entity.getUpperLimit4_TX();
		if (UpperLimit4_TX != null) {
			stmt.bindString(20, UpperLimit4_TX);
		}

		String MetricUnit_TX = entity.getMetricUnit_TX();
		if (MetricUnit_TX != null) {
			stmt.bindString(21, MetricUnit_TX);
		}

		String StandardValue_TX = entity.getStandardValue_TX();
		if (StandardValue_TX != null) {
			stmt.bindString(22, StandardValue_TX);
		}

		String ParmLowerLimit_TX = entity.getParmLowerLimit_TX();
		if (ParmLowerLimit_TX != null) {
			stmt.bindString(23, ParmLowerLimit_TX);
		}

		String ParmUpperLimit_TX = entity.getParmUpperLimit_TX();
		if (ParmUpperLimit_TX != null) {
			stmt.bindString(24, ParmUpperLimit_TX);
		}

		Integer DataCodeGroup_ID = entity.getDataCodeGroup_ID();
		if (DataCodeGroup_ID != null) {
			stmt.bindLong(25, DataCodeGroup_ID);
		}
		stmt.bindString(26, entity.getMustCheck_YN());

		String SpecCase_YN = entity.getSpecCase_YN();
		if (SpecCase_YN != null) {
			stmt.bindString(27, SpecCase_YN);
		}

		String SpecCase_TX = entity.getSpecCase_TX();
		if (SpecCase_TX != null) {
			stmt.bindString(28, SpecCase_TX);
		}

		Float WenDu_FSL = entity.getWenDu_FSL();
		if (WenDu_FSL != null) {
			stmt.bindDouble(29, WenDu_FSL);
		}

		String DisStart_TM = entity.getDisStart_TM();
		if (DisStart_TM != null) {
			stmt.bindString(30, DisStart_TM);
		}

		String DisEnd_TM = entity.getDisEnd_TM();
		if (DisEnd_TM != null) {
			stmt.bindString(31, DisEnd_TM);
		}

		String LKPoint_ID = entity.getLKPoint_ID();
		if (LKPoint_ID != null) {
			stmt.bindString(32, LKPoint_ID);
		}

		String SRPoint_ID = entity.getSRPoint_ID();
		if (SRPoint_ID != null) {
			stmt.bindString(33, SRPoint_ID);
		}

		String MObjectState_TX = entity.getMObjectState_TX();
		if (MObjectState_TX != null) {
			stmt.bindString(34, MObjectState_TX);
		}

		String DefaultResult_TX = entity.getDefaultResult_TX();
		if (DefaultResult_TX != null) {
			stmt.bindString(35, DefaultResult_TX);
		}

		Integer MobjectBugSpec_ID = entity.getMobjectBugSpec_ID();
		if (MobjectBugSpec_ID != null) {
			stmt.bindLong(36, MobjectBugSpec_ID);
		}

		String SensorRatio_TX = entity.getSensorRatio_TX();
		if (SensorRatio_TX != null) {
			stmt.bindString(37, SensorRatio_TX);
		}

		String LastResult_TX = entity.getLastResult_TX();
		if (LastResult_TX != null) {
			stmt.bindString(38, LastResult_TX);
		}

		Float WARNINGVALUE_NR = entity.getWARNINGVALUE_NR();
		if (WARNINGVALUE_NR != null) {
			stmt.bindDouble(39, WARNINGVALUE_NR);
		}

		String LastComplete_DT = entity.getLastComplete_DT();
		if (LastComplete_DT != null) {
			stmt.bindString(40, LastComplete_DT);
		}

		String TransInfo_TX = entity.getTransInfo_TX();
		if (TransInfo_TX != null) {
			stmt.bindString(41, TransInfo_TX);
		}

		String ConLevel_TX = entity.getConLevel_TX();
		if (ConLevel_TX != null) {
			stmt.bindString(42, ConLevel_TX);
		}

		String PlanCycleIDsStr_TX = entity.getPlanCycleIDsStr_TX();
		if (PlanCycleIDsStr_TX != null) {
			stmt.bindString(43, PlanCycleIDsStr_TX);
		}

		String GroupNum_NR = entity.getGroupNum_NR();
		if (GroupNum_NR != null) {
			stmt.bindString(44, GroupNum_NR);
		}

		Integer MaxFreq_NR = entity.getMaxFreq_NR();
		if (MaxFreq_NR != null) {
			stmt.bindLong(45, MaxFreq_NR);
		}

		Integer FFTLine_NR = entity.getFFTLine_NR();
		if (FFTLine_NR != null) {
			stmt.bindLong(46, FFTLine_NR);
		}

		Integer WindowType_NR = entity.getWindowType_NR();
		if (WindowType_NR != null) {
			stmt.bindLong(47, WindowType_NR);
		}

		Integer AverNum_NR = entity.getAverNum_NR();
		if (AverNum_NR != null) {
			stmt.bindLong(48, AverNum_NR);
		}

		String Speed_YN = entity.getSpeed_YN();
		if (Speed_YN != null) {
			stmt.bindString(49, Speed_YN);
		}

		Integer AverageType_NR = entity.getAverageType_NR();
		if (AverageType_NR != null) {
			stmt.bindLong(50, AverageType_NR);
		}

		Integer Overlap_NR = entity.getOverlap_NR();
		if (Overlap_NR != null) {
			stmt.bindLong(51, Overlap_NR);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public Z_DJ_Plan readEntity(Cursor cursor, int offset) {
		Z_DJ_Plan entity = new Z_DJ_Plan(
				//
				cursor.getString(offset + 0), // DJ_Plan_ID
				cursor.getString(offset + 1), // PlanDesc_TX
				cursor.getInt(offset + 2), // SortNo_NR
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ESTStandard_TX
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DataType_CD
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ZhenDong_Type
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ZhenDong_PP
				cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Cycle_ID
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CycleBaseDate_DT
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // IDPos_ID
				cursor.getInt(offset + 10), // CheckMethod
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // AlarmType_ID
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // LowerLimit1_TX
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // LowerLimit2_TX
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // LowerLimit3_TX
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // LowerLimit4_TX
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // UpperLimit1_TX
				cursor.isNull(offset + 17) ? null : cursor
						.getString(offset + 17), // UpperLimit2_TX
				cursor.isNull(offset + 18) ? null : cursor
						.getString(offset + 18), // UpperLimit3_TX
				cursor.isNull(offset + 19) ? null : cursor
						.getString(offset + 19), // UpperLimit4_TX
				cursor.isNull(offset + 20) ? null : cursor
						.getString(offset + 20), // MetricUnit_TX
				cursor.isNull(offset + 21) ? null : cursor
						.getString(offset + 21), // StandardValue_TX
				cursor.isNull(offset + 22) ? null : cursor
						.getString(offset + 22), // ParmLowerLimit_TX
				cursor.isNull(offset + 23) ? null : cursor
						.getString(offset + 23), // ParmUpperLimit_TX
				cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // DataCodeGroup_ID
				cursor.getString(offset + 25), // MustCheck_YN
				cursor.isNull(offset + 26) ? null : cursor
						.getString(offset + 26), // SpecCase_YN
				cursor.isNull(offset + 27) ? null : cursor
						.getString(offset + 27), // SpecCase_TX
				cursor.isNull(offset + 28) ? null : cursor
						.getFloat(offset + 28), // WenDu_FSL
				cursor.isNull(offset + 29) ? null : cursor
						.getString(offset + 29), // DisStart_TM
				cursor.isNull(offset + 30) ? null : cursor
						.getString(offset + 30), // DisEnd_TM
				cursor.isNull(offset + 31) ? null : cursor
						.getString(offset + 31), // LKPoint_ID
				cursor.isNull(offset + 32) ? null : cursor
						.getString(offset + 32), // SRPoint_ID
				cursor.isNull(offset + 33) ? null : cursor
						.getString(offset + 33), // MObjectState_TX
				cursor.isNull(offset + 34) ? null : cursor
						.getString(offset + 34), // DefaultResult_TX
				cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // MobjectBugSpec_ID
				cursor.isNull(offset + 36) ? null : cursor
						.getString(offset + 36), // SensorRatio_TX
				cursor.isNull(offset + 37) ? null : cursor
						.getString(offset + 37), // LastResult_TX
				cursor.isNull(offset + 38) ? null : cursor
						.getFloat(offset + 38), // WARNINGVALUE_NR
				cursor.isNull(offset + 39) ? null : cursor
						.getString(offset + 39), // LastComplete_DT
				cursor.isNull(offset + 40) ? null : cursor
						.getString(offset + 40), // TransInfo_TX
				cursor.isNull(offset + 41) ? null : cursor
						.getString(offset + 41), // ConLevel_TX
				cursor.isNull(offset + 42) ? null : cursor
						.getString(offset + 42), // PlanCycleIDsStr_TX
				cursor.isNull(offset + 43) ? null : cursor
						.getString(offset + 43), // GroupNum_NR
				cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44), // MaxFreq_NR
				cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // FFTLine_NR
				cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // WindowType_NR
				cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // AverNum_NR
				cursor.isNull(offset + 48) ? null : cursor
						.getString(offset + 48), // Speed_YN
				cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // AverageType_NR
				cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50) // Overlap_NR
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Z_DJ_Plan entity, int offset) {
		entity.setDJ_Plan_ID(cursor.getString(offset + 0));
		entity.setPlanDesc_TX(cursor.getString(offset + 1));
		entity.setSortNo_NR(cursor.getInt(offset + 2));
		entity.setESTStandard_TX(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setDataType_CD(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setZhenDong_Type(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setZhenDong_PP(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setCycle_ID(cursor.isNull(offset + 7) ? null : cursor
				.getInt(offset + 7));
		entity.setCycleBaseDate_DT(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setIDPos_ID(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setCheckMethod(cursor.getInt(offset + 10));
		entity.setAlarmType_ID(cursor.isNull(offset + 11) ? null : cursor
				.getInt(offset + 11));
		entity.setLowerLimit1_TX(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setLowerLimit2_TX(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setLowerLimit3_TX(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setLowerLimit4_TX(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setUpperLimit1_TX(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setUpperLimit2_TX(cursor.isNull(offset + 17) ? null : cursor
				.getString(offset + 17));
		entity.setUpperLimit3_TX(cursor.isNull(offset + 18) ? null : cursor
				.getString(offset + 18));
		entity.setUpperLimit4_TX(cursor.isNull(offset + 19) ? null : cursor
				.getString(offset + 19));
		entity.setMetricUnit_TX(cursor.isNull(offset + 20) ? null : cursor
				.getString(offset + 20));
		entity.setStandardValue_TX(cursor.isNull(offset + 21) ? null : cursor
				.getString(offset + 21));
		entity.setParmLowerLimit_TX(cursor.isNull(offset + 22) ? null : cursor
				.getString(offset + 22));
		entity.setParmUpperLimit_TX(cursor.isNull(offset + 23) ? null : cursor
				.getString(offset + 23));
		entity.setDataCodeGroup_ID(cursor.isNull(offset + 24) ? null : cursor
				.getInt(offset + 24));
		entity.setMustCheck_YN(cursor.getString(offset + 25));
		entity.setSpecCase_YN(cursor.isNull(offset + 26) ? null : cursor
				.getString(offset + 26));
		entity.setSpecCase_TX(cursor.isNull(offset + 27) ? null : cursor
				.getString(offset + 27));
		entity.setWenDu_FSL(cursor.isNull(offset + 28) ? null : cursor
				.getFloat(offset + 28));
		entity.setDisStart_TM(cursor.isNull(offset + 29) ? null : cursor
				.getString(offset + 29));
		entity.setDisEnd_TM(cursor.isNull(offset + 30) ? null : cursor
				.getString(offset + 30));
		entity.setLKPoint_ID(cursor.isNull(offset + 31) ? null : cursor
				.getString(offset + 31));
		entity.setSRPoint_ID(cursor.isNull(offset + 32) ? null : cursor
				.getString(offset + 32));
		entity.setMObjectState_TX(cursor.isNull(offset + 33) ? null : cursor
				.getString(offset + 33));
		entity.setDefaultResult_TX(cursor.isNull(offset + 34) ? null : cursor
				.getString(offset + 34));
		entity.setMobjectBugSpec_ID(cursor.isNull(offset + 35) ? null : cursor
				.getInt(offset + 35));
		entity.setSensorRatio_TX(cursor.isNull(offset + 36) ? null : cursor
				.getString(offset + 36));
		entity.setLastResult_TX(cursor.isNull(offset + 37) ? null : cursor
				.getString(offset + 37));
		entity.setWARNINGVALUE_NR(cursor.isNull(offset + 38) ? null : cursor
				.getFloat(offset + 38));
		entity.setLastComplete_DT(cursor.isNull(offset + 39) ? null : cursor
				.getString(offset + 39));
		entity.setTransInfo_TX(cursor.isNull(offset + 40) ? null : cursor
				.getString(offset + 40));
		entity.setConLevel_TX(cursor.isNull(offset + 41) ? null : cursor
				.getString(offset + 41));
		entity.setPlanCycleIDsStr_TX(cursor.isNull(offset + 42) ? null : cursor
				.getString(offset + 42));
		entity.setGroupNum_NR(cursor.isNull(offset + 43) ? null : cursor
				.getString(offset + 43));
		entity.setMaxFreq_NR(cursor.isNull(offset + 44) ? null : cursor
				.getInt(offset + 44));
		entity.setFFTLine_NR(cursor.isNull(offset + 45) ? null : cursor
				.getInt(offset + 45));
		entity.setWindowType_NR(cursor.isNull(offset + 46) ? null : cursor
				.getInt(offset + 46));
		entity.setAverNum_NR(cursor.isNull(offset + 47) ? null : cursor
				.getInt(offset + 47));
		entity.setSpeed_YN(cursor.isNull(offset + 48) ? null : cursor
				.getString(offset + 48));
		entity.setAverageType_NR(cursor.isNull(offset + 49) ? null : cursor
				.getInt(offset + 49));
		entity.setOverlap_NR(cursor.isNull(offset + 50) ? null : cursor
				.getInt(offset + 50));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(Z_DJ_Plan entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(Z_DJ_Plan entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public List<Z_DJ_Plan> loadAll(String idPosID) {
		String sqlString = "select * from Z_DJ_Plan where IDPos_ID ='"
				+ idPosID + "'";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}
	
	/**
	 * 根据钮扣ID获取条件巡检计划
	 * @param idPosID
	 * @return
	 */
	public List<Z_DJ_Plan> loadAllForCASEXJ(String idPosID) {
		String begintime = "";
        String endtime = "";
        
		String sqlString = "select * from Z_DJ_Plan where IDPos_ID = '"
				+ idPosID 
				+ "' And Cycle_ID >= 0";		
        if (!StringUtils.isEmpty(AppConst.PlanTimeStr) && AppConst.PlanTimeStr.split("~").length == 2) {
        	begintime = AppConst.PlanTimeStr.split("~")[0];
            endtime = AppConst.PlanTimeStr.split("~")[1];
        }
        if (!StringUtils.isEmpty(AppConst.ConditionStr)) {
        	sqlString += " And ConLevel_TX ='" + AppConst.ConditionStr + "'";
        }
        if (!StringUtils.isEmpty(begintime) && 
        		!StringUtils.isEmpty(endtime) && 
        		!StringUtils.isEmpty(AppConst.PlanTimeIDStr)) {
        	sqlString += " And '|'||PlanCycleIDsStr_TX like '%|" + AppConst.PlanTimeIDStr + "|%'";
        }
        sqlString += " ORDER BY SortNo_NR";
        
     
        
        Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * 更新 计划信息（LastComplete_DT、LastResult_TX）
	 * 
	 * @param entity
	 */
	public void UpdateDJPlan(Z_DJ_Plan entity) {	
		String sql = "update Z_DJ_Plan set LastComplete_DT ='"
				+ entity.getLastComplete_DT() + "',LastResult_TX ='"
				+ entity.getLastResult_TX() + "' where DJ_Plan_ID ='"
				+ entity.getDJ_Plan_ID() + "'";
		db.execSQL(sql);
	}
	
	/**
	 * 更新计划信息（条件巡检）
	 * @param entity
	 */
	public void UpdateDJPlanForCASEXJ(Z_DJ_Plan entity) {
		String sql = "update Z_DJ_Plan set LastComplete_DT ='"
				+ entity.getLastComplete_DT() + "',LastResult_TX ='"
				+ entity.getLastResult_TX() + "'";
		if (!StringUtils.isEmpty(entity.getPlanCycleIDsStr_TX())) {
			String str = "";
			if (entity.getPlanCycleIDsStr_TX().substring(0, 1).equals("|")) {
				str = entity.getPlanCycleIDsStr_TX().replace("|" + AppConst.PlanTimeIDStr + "|", "|");
			} else {
				str = "|" + entity.getPlanCycleIDsStr_TX();
				str = str.replace("|" + AppConst.PlanTimeIDStr + "|", "|");
			}
			entity.setPlanCycleIDsStr_TX(str);
			
			sql += ",PlanCycleIDsStr_TX = '" + entity.getPlanCycleIDsStr_TX() + "'";
		}
		
		sql += " where DJ_Plan_ID ='"
				+ entity.getDJ_Plan_ID() + "'";
		db.execSQL(sql);
	}
	
	public List<Z_DJ_Plan> getDJPlanIsCompleteForCASEXJ(String  planID, String lastCompleteDT, String conditionStr) {
		String sqlString = "select * from Z_DJ_Plan where DJ_Plan_ID = '" 
				+ planID + "' and lastComplete_DT = '"
				+ lastCompleteDT + "' and PlanCycleIDsStr_TX not like '%"
				+ conditionStr + "%'";
		
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}
	
	/**
	 * 根据钮扣ID获取计划，用于条件巡检实时上传
	 * @param idPosID
	 * @return
	 */
	public List<Z_DJ_Plan> getDJPlanByIDPosIDForCaseXJJIT(String idPosID) {
		String sqlString = "select * from Z_DJ_Plan where IDPos_ID = '"
				+ idPosID + "' Order By SortNo_NR";
		
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}
}
