package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.sqlite.XJHisDataBaseSession;
import com.moons.xst.track.bean.MObject_StateHis;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MOBJECT_STATE_HIS.
*/
public class MObject_StateHisDao extends AbstractDao<MObject_StateHis, Void> {

    public static final String TABLENAME = "MOBJECT_STATEHIS";

    /**
     * Properties of entity MObject_StateHis.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StartAndEndPoint_ID = new Property(0, String.class, "StartAndEndPoint_ID", false, "STARTANDENDPOINT_ID");
        public final static Property CompleteTime_DT = new Property(1, String.class, "CompleteTime_DT", false, "COMPLETETIME_DT");
        public final static Property MObjectState_CD = new Property(2, String.class, "MObjectState_CD", false, "MOBJECTSTATE_CD");
        public final static Property MObjectStateName_TX = new Property(3, String.class, "MObjectStateName_TX", false, "MOBJECTSTATENAME_TX");
        public final static Property AppUser_CD = new Property(4, String.class, "AppUser_CD", false, "APPUSER_CD");
        public final static Property DataState_YN = new Property(5, String.class, "DataState_YN", false, "DATASTATE_YN");
        public final static Property TransInfo_TX = new Property(6, String.class, "TransInfo_TX", false, "TRANSINFO_TX");
    };


    public MObject_StateHisDao(DaoConfig config) {
        super(config);
    }
    
    public MObject_StateHisDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    public MObject_StateHisDao(DaoConfig mObject_StateHisDaoConfig,
			XJHisDataBaseSession xjHisDataBaseSession) {
    	   super(mObject_StateHisDaoConfig, xjHisDataBaseSession);
	}

	/** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MOBJECT_STATE_HIS' (" + //
                "'START_AND_END_POINT_ID' TEXT NOT NULL ," + // 0: StartAndEndPoint_ID
                "'COMPLETE_TIME_DT' TEXT NOT NULL ," + // 1: CompleteTime_DT
                "'MOBJECT_STATE_CD' TEXT," + // 2: MObjectState_CD
                "'MOBJECT_STATE_NAME_TX' TEXT NOT NULL ," + // 3: MObjectStateName_TX
                "'APP_USER_CD' TEXT," + // 4: AppUser_CD
                "'DATA_STATE_YN' TEXT," + // 5: DataState_YN
                "'TRANS_INFO_TX' TEXT);"); // 6: TransInfo_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MOBJECT_STATE_HIS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MObject_StateHis entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getStartAndEndPoint_ID());
        stmt.bindString(2, entity.getCompleteTime_DT());
 
        String MObjectState_CD = entity.getMObjectState_CD();
        if (MObjectState_CD != null) {
            stmt.bindString(3, MObjectState_CD);
        }
        stmt.bindString(4, entity.getMObjectStateName_TX());
 
        String AppUser_CD = entity.getAppUser_CD();
        if (AppUser_CD != null) {
            stmt.bindString(5, AppUser_CD);
        }
 
        String DataState_YN = entity.getDataState_YN();
        if (DataState_YN != null) {
            stmt.bindString(6, DataState_YN);
        }
 
        String TransInfo_TX = entity.getTransInfo_TX();
        if (TransInfo_TX != null) {
            stmt.bindString(7, TransInfo_TX);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public MObject_StateHis readEntity(Cursor cursor, int offset) {
        MObject_StateHis entity = new MObject_StateHis( //
            cursor.getString(offset + 0), // StartAndEndPoint_ID
            cursor.getString(offset + 1), // CompleteTime_DT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MObjectState_CD
            cursor.getString(offset + 3), // MObjectStateName_TX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AppUser_CD
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DataState_YN
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // TransInfo_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MObject_StateHis entity, int offset) {
        entity.setStartAndEndPoint_ID(cursor.getString(offset + 0));
        entity.setCompleteTime_DT(cursor.getString(offset + 1));
        entity.setMObjectState_CD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMObjectStateName_TX(cursor.getString(offset + 3));
        entity.setAppUser_CD(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDataState_YN(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTransInfo_TX(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(MObject_StateHis entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(MObject_StateHis entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
