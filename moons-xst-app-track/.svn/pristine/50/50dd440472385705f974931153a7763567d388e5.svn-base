package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.GPSPositionForResult;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GPSPOSITION_FOR_RESULT.
 */
public class GPSPositionForResultDao extends
		AbstractDao<GPSPositionForResult, Void> {

	public static final String TABLENAME = "GPSPOSITIONFORRESULT";

	/**
	 * Properties of entity GPSPositionForResult.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property GPSPosition_ID = new Property(0,
				int.class, "GPSPosition_ID", false, "GPSPOSITION_ID");
		public final static Property GPSPosition_CD = new Property(1,
				String.class, "GPSPosition_CD", false, "GPSPOSITION_CD");
		public final static Property XJQMark = new Property(2, String.class,
				"XJQMark", false, "XJQMARK");
		public final static Property Longitude = new Property(3, String.class,
				"Longitude", false, "LONGITUDE");
		public final static Property Latitude = new Property(4, String.class,
				"Latitude", false, "LATITUDE");
		public final static Property UTCDateTime = new Property(5,
				String.class, "UTCDateTime", false, "UTCDATETIME");
		public final static Property GPSDesc = new Property(6, String.class,
				"GPSDesc", false, "GPSDESC");
		public final static Property LineID = new Property(7, String.class,
				"LineID", false, "LINEID");
		public final static Property AppUser_ID = new Property(8, int.class,
				"AppUser_ID", false, "APPUSER_ID");
		public final static Property AppUserName_TX = new Property(9,
				String.class, "AppUserName_TX", false, "APPUSERNAME_TX");
		public final static Property Post_ID = new Property(10, int.class,
				"Post_ID", false, "POST_ID");
		public final static Property DistanceTime = new Property(11,
				String.class, "DistanceTime", false, "DistanceTime");
	};

	public GPSPositionForResultDao(DaoConfig config) {
		super(config);
	}

	public GPSPositionForResultDao(DaoConfig config,
			DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "GPSPOSITIONFORRESULT (" + //
				"GPSPOSITION_ID INTEGER NOT NULL ," + // 0: GPSPosition_ID
				"GPSPOSITION_CD nvarchar(50) NOT NULL ," + // 1:
															// GPSPosition_CD
				"XJQMARK nvarchar(150) NOT NULL ," + // 2: XJQMark
				"LONGITUDE nvarchar(150) NOT NULL ," + // 3: Longitude
				"LATITUDE nvarchar(150) NOT NULL ," + // 4: Latitude
				"UTCDATETIME nvarchar(150) NOT NULL ," + // 5: UTCDateTime
				"GPSDESC nvarchar(150) NOT NULL ," + // 6: GPSDesc
				"LINEID nvarchar(150) NOT NULL ," + // 7: LineID
				"APPUSER_ID INTEGER NOT NULL ," + // 8: AppUser_ID
				"APPUSERNAME_TX nvarchar(40) NOT NULL ," + // 9:
															// AppUserName_TX
				"POST_ID INTEGER NOT NULL ," + // 10: Post_ID
				"DistanceTime nvarchar(40) NOT NULL );");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'GPSPOSITIONFORRESULT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, GPSPositionForResult entity) {
		stmt.clearBindings();
		stmt.bindLong(1, entity.getGPSPosition_ID());
		stmt.bindString(2, entity.getGPSPosition_CD());
		stmt.bindString(3, entity.getXJQMark());
		stmt.bindString(4, entity.getLongitude());
		stmt.bindString(5, entity.getLatitude());
		stmt.bindString(6, entity.getUTCDateTime());
		stmt.bindString(7, entity.getGPSDesc());
		stmt.bindString(8, entity.getLineID());
		stmt.bindLong(9, entity.getAppUser_ID());
		stmt.bindString(10, entity.getAppUserName_TX());
		stmt.bindLong(11, entity.getPost_ID());
		stmt.bindString(12, entity.getDistanceTime());
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public GPSPositionForResult readEntity(Cursor cursor, int offset) {
		GPSPositionForResult entity = new GPSPositionForResult( //
				cursor.getInt(offset + 0), // GPSPosition_ID
				cursor.getString(offset + 1), // GPSPosition_CD
				cursor.getString(offset + 2), // XJQMark
				cursor.getString(offset + 3), // Longitude
				cursor.getString(offset + 4), // Latitude
				cursor.getString(offset + 5), // UTCDateTime
				cursor.getString(offset + 6), // GPSDesc
				cursor.getString(offset + 7), // LineID
				cursor.getInt(offset + 8), // AppUser_ID
				cursor.getString(offset + 9), // AppUserName_TX
				cursor.getInt(offset + 10), // Post_ID
				cursor.getString(offset + 11)//
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, GPSPositionForResult entity,
			int offset) {
		entity.setGPSPosition_ID(cursor.getInt(offset + 0));
		entity.setGPSPosition_CD(cursor.getString(offset + 1));
		entity.setXJQMark(cursor.getString(offset + 2));
		entity.setLongitude(cursor.getString(offset + 3));
		entity.setLatitude(cursor.getString(offset + 4));
		entity.setUTCDateTime(cursor.getString(offset + 5));
		entity.setGPSDesc(cursor.getString(offset + 6));
		entity.setLineID(cursor.getString(offset + 7));
		entity.setAppUser_ID(cursor.getInt(offset + 8));
		entity.setAppUserName_TX(cursor.getString(offset + 9));
		entity.setPost_ID(cursor.getInt(offset + 10));
		entity.setDistanceTime(cursor.getString(offset + 11));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(GPSPositionForResult entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(GPSPositionForResult entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * 加载数据（供实时上传巡线到位数据）
	 * 
	 * @param loadcount
	 * @return
	 */
	public List<GPSPositionForResult> loadforUploadJIT(int loadcount) {
		String sqlString = "select * from GPSPOSITIONFORRESULT order by UTCDATETIME desc limit 0,"
				+ loadcount;
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */
	public void deleteUploadedData(List<GPSPositionForResult> uploadedData) {
		for (GPSPositionForResult gpsPositionResult : uploadedData) {
			deleteDatabyCondition(gpsPositionResult.getGPSPosition_ID(),
					gpsPositionResult.getUTCDateTime());
		}
	}

	public void deleteDatabyCondition(int _id, String _utcdatetime) {
		String sql = "delete from GPSPOSITIONFORRESULT where GPSPOSITION_ID = " + _id 
				+ " and UTCDATETIME = '" + _utcdatetime + "'"; 
		db.execSQL(sql);
	}

}
