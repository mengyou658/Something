package com.moons.xst.track.ui;

import java.io.File;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.moons.xst.track.AppConfig;
import com.moons.xst.track.AppConst;
import com.moons.xst.track.AppContext;
import com.moons.xst.track.AppManager;
import com.moons.xst.track.R;
import com.moons.xst.track.adapter.DJPCUserAdapter;
import com.moons.xst.track.bean.CommUser;
import com.moons.xst.track.bean.CommonSearchBean;
import com.moons.xst.track.bean.DJLine;
import com.moons.xst.track.bean.ResponseLogInfo;
import com.moons.xst.track.bean.ReturnResultInfo;
import com.moons.xst.track.common.FileEncryptAndDecrypt;
import com.moons.xst.track.common.FileUtils;
import com.moons.xst.track.common.ResponseLogInfoHelper;
import com.moons.xst.track.common.StringUtils;
import com.moons.xst.track.common.UIHelper;
import com.moons.xst.track.common.ZipUtils;
import com.moons.xst.track.communication.UpLoad;
import com.moons.xst.track.communication.WebserviceFactory;
import com.moons.xst.track.widget.LoadingDialog;

import de.greenrobot.event.EventBus;

public class CommDJPCDownload extends BaseActivity {

	private Gson gson;
	private GsonBuilder builder;
	private LoadingDialog loading;

	ImageButton returnButton, query_djline_serach;
	ListView lv_user;
	DJPCUserAdapter adapter;

	// 2641人员list
	List<CommUser> list = new ArrayList<CommUser>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO 自动生成的方法存根
		super.onCreate(savedInstanceState);
		setContentView(R.layout.comm_djpc_download_layout);
		EventBus.getDefault().register(this);
		init();
		// 上传数据
		if (AppContext.resultDataFileListBuffer != null
				&& AppContext.resultDataFileListBuffer.size() > 0) {
			showUploadingDialog();
			try {
				upLoadResultListData(CommDJPCDownload.this);
			} catch (Exception e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
				Dialog.dismiss();
				UIHelper.ToastMessage(CommDJPCDownload.this,
						e.toString());
			}
		}else{
			loadUser();
		}
	}

	public void init() {
		builder = new GsonBuilder();
		gson = builder.create();
		// 查询
		query_djline_serach = (ImageButton) findViewById(R.id.query_djline_serach);
		query_djline_serach.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO 自动生成的方法存根
				// 搜索按钮点击事件
				CommonSearchBean<CommUser> commonSearchBean = new CommonSearchBean<CommUser>();
				commonSearchBean.setList(list);
				commonSearchBean.setSearchType(AppConst.SearchType.CommUser
						.toString());
				commonSearchBean
						.setHint(getString(R.string.commu_djpc_condition_name_number_hint));
				Intent intent = new Intent(CommDJPCDownload.this,
						UnifySearchAty.class);
				intent.putExtra("seachBean", (Serializable) commonSearchBean);
				startActivity(intent);
			}
		});
		lv_user = (ListView) findViewById(R.id.lv_user);
		lv_user.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO 自动生成的方法存根
				CommUser entity = list.get(position);
				SkipActivity(entity);
			}
		});

		returnButton = (ImageButton) findViewById(R.id.home_head_Rebutton);
		returnButton.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO 自动生成的方法存根
				AppManager.getAppManager()
						.finishActivity(CommDJPCDownload.this);
			}
		});
	}

	// 加载人员信息
	private void loadUser() {
		if (loading == null || !loading.isShowing()) {
			loading = new LoadingDialog(this);
			loading.setCanceledOnTouchOutside(false);
			loading.setCancelable(false);
			loading.show();
		}
		// 获取人员信息
		new Thread() {
			@Override
			public void run() {
				list = WebserviceFactory
						.getQueryUser(CommDJPCDownload.this, "");
				Message msg = new Message();
				msg.what = 1;
				mHandler.sendMessage(msg);
			}
		}.start();
	}

	Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			if (loading != null && loading.isShowing()) {
				loading.dismiss();
			}
			if (msg.what == 1) {// 2641显示人员
				adapter = new DJPCUserAdapter(CommDJPCDownload.this, list,
						R.layout.djpc_user_item);
				lv_user.setAdapter(adapter);
			}
			if (msg.what == 2) {// 2641标准化完成
				UIHelper.showCommuDownLoad(CommDJPCDownload.this);
				AppManager.getAppManager()
						.finishActivity(CommDJPCDownload.this);
			}
			if (msg.what == -1) {// 提示信息
				if (msg.obj != null) {
					UIHelper.ToastMessage(CommDJPCDownload.this,
							msg.obj.toString());
				}
			}
		};
	};

	Handler mUploadProgBarHandler = new Handler() {
		public void handleMessage(Message msg) {
			if (msg.what == 1) {// 接收上传进度条
				if (Dialog != null && !Dialog.isShowing()) {
					Dialog.show();
				}
				mProgress.setProgress(msg.arg1);
				mProgressText.setText(msg.obj.toString());
			}
			if (msg.what == 2) {// 全部上传完成
				Dialog.dismiss();
				loadUser();
			}
			if (msg.what == -1) {
				Dialog.dismiss();
				if (msg.obj != null) {
					UIHelper.ToastMessage(CommDJPCDownload.this,
							msg.obj.toString());
				}
				loadUser();
			}
		};
	};

	// 创建tempLineList
	private void CreationLineXML(String xmlLineStr) {
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

		File file = new File(AppConst.XSTBasePath(),AppConst.DJLineTempXmlFile);
		try {
			FileOutputStream fos = new FileOutputStream(file);
			StringBuffer sb = new StringBuffer();
			// 添加xml头
			sb.append("<?xml version='1.0'?>");
			// 添加根节点
			sb.append("<NewDataSet>");

			StringReader stringReader = new StringReader(xmlLineStr);
			InputSource inputSource = new InputSource(stringReader);
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document doc = db.parse(inputSource);
			doc.normalize();
			NodeList tableList = doc.getElementsByTagName("Table");
			for (int i = 0; i < tableList.getLength(); i++) {
				sb.append("<Table>");
				Node table = tableList.item(i);
				for (Node node = table.getFirstChild(); node != null; node = node
						.getNextSibling()) {
					if (node.getNodeName().toUpperCase().equals("LINE_ID")) {
						sb.append("<LINE_ID>");
						sb.append(node.getTextContent());
						sb.append("</LINE_ID>");
					} else if (node.getNodeName().toUpperCase()
							.equals("NAME_TX")) {
						sb.append("<NAME_TX>");
						sb.append(node.getTextContent());
						sb.append("</NAME_TX>");
					} else if (node.getNodeName().toUpperCase()
							.equals("STANDARD_TM")) {
						sb.append("<BUILD_TM>");
						sb.append(node.getTextContent());
						sb.append("</BUILD_TM>");
						sb.append("<STANDARD_TM>");
						sb.append(node.getTextContent());
						sb.append("</STANDARD_TM>");
					} else if (node.getNodeName().toUpperCase()
							.equals("BUILD_YN")) {
						sb.append("<BUILD_YN>");
						sb.append(node.getTextContent());
						sb.append("</BUILD_YN>");
					}
				}
				sb.append("<IDTYPE_CD>");
				sb.append("R");
				sb.append("</IDTYPE_CD>");
				sb.append("<PCTYPE_CD>");
				sb.append("1");
				sb.append("</PCTYPE_CD>");
				sb.append("<XJQ_ID>");
				sb.append("");
				sb.append("</XJQ_ID>");
				sb.append("<XJQ_CD>");
				sb.append("");
				sb.append("</XJQ_CD>");
				sb.append("<XJQTYPE_CD>");
				sb.append("3TH");
				sb.append("</XJQTYPE_CD>");
				sb.append("</Table>");
			}
			sb.append("</NewDataSet>");
			fos.write(sb.toString().getBytes());
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 创建userxml
	public void CreationUserXML(String xmlUserStr) {
		File file = new File(AppConst.XSTBasePath(), AppConst.UserXmlFile);
		try {
			FileOutputStream fos = new FileOutputStream(file);
			StringBuffer sb = new StringBuffer();
			sb.append(xmlUserStr);
			fos.write(sb.toString().getBytes());
			fos.close();
			// 文件加密
			FileEncryptAndDecrypt.encrypt(AppConst.XSTBasePath()
					+ AppConst.UserXmlFile);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 搜索回调事件
	public void onEvent(CommUser entity) {
		SkipActivity(entity);
	}

	// 进度条
	private ProgressBar mProgress;
	// 显示上传数值
	private TextView mProgressText;
	// 上传对话框
	private com.moons.xst.track.widget.AlertDialog Dialog;
	

	/**
	 * 显示上传进度框
	 */
	public void showUploadingDialog() {
		LayoutInflater factory = LayoutInflater.from(CommDJPCDownload.this);
		final View view = factory.inflate(R.layout.progressbar_layout,
				null);
		mProgressText=(TextView) view.findViewById(R.id.update_progress_text);
		mProgress=(ProgressBar) view.findViewById(R.id.update_progress);
		
		mProgressText.setText(getString(R.string.setting_sys_aboutus_checkupdata_diapromptinfo));
		Dialog=new com.moons.xst.track.widget.AlertDialog(CommDJPCDownload.this)
		.builder()
		.setTitle(getString(R.string.commu_djpc_uploading_title))
		.setView(view).setCancelable(false).setCanceledOnTouchOutside(false).setButtonGone();
		Dialog.show();
	}

	private void SkipActivity(CommUser entity) {
		if (loading == null || !loading.isShowing()) {
			loading = new LoadingDialog(this);
			loading.setCanceledOnTouchOutside(false);
			loading.setCancelable(false);
			loading.show();
		}
		final String json = gson.toJson(entity, CommUser.class);
		new Thread() {
			@Override
			public void run() {
				// 点检排程下载路线xml以及标准化路线
				ReturnResultInfo ReturnInfo = WebserviceFactory
						.AndroidInitDJPCLine(json);
				if (ReturnInfo.getResult_YN()) {
					// 转载路线下载地址
					try {
						AppContext.DJPCLineMap.clear();
						JSONArray jsonArray = new JSONArray(
								ReturnInfo.getExResult1_TX());
						for (int i = 0; i < jsonArray.length(); i++) {
							JSONObject jsonObject = jsonArray.getJSONObject(i);
							String lineId = jsonObject.getString("LineId");
							String error = jsonObject.getString("errorHint");
							if (StringUtils.isEmpty(error)) {
								String url = jsonObject
										.getString("DownloadUrl");
								AppContext.DJPCLineMap.put(lineId, url);
							} else {
								AppContext.DJPCLineMap
										.put(lineId,
												getString(R.string.download_state_encodeErr)
														+ "：" + error);
							}
						}
					} catch (JSONException e) {
						// TODO 自动生成的 catch 块
						e.printStackTrace();
					}
					// 创建tempLineList.xml
					CreationLineXML(ReturnInfo.getResult_Content_TX());
					// 创建UserList.xml
					CreationUserXML(ReturnInfo.getExResult2_TX());

					Message msg = new Message();
					msg.what = 2;
					mHandler.sendMessage(msg);
				} else {
					Message msg = new Message();
					msg.what = -1;
					msg.obj = ReturnInfo.getError_Message_TX();
					mHandler.sendMessage(msg);
				}
			}
		}.start();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		EventBus.getDefault().unregister(this);
	};
	boolean isSucceed=true;
	/**
	 * 上传结果数据
	 */
	public void upLoadResultListData(Context context) {
		isSucceed=true;
		new Thread() {
			@Override
			public void run() {
				Context context = AppContext.baseContext;
				UpLoad uploadRes = new UpLoad(context);
				boolean isUpPlan = true;
				for (DJLine _djLine : AppContext.resultDataFileListBuffer) {
					try {

						File _file = new File(_djLine.getResultDBPath());
						// 判断有没有结果库，有的话上传
						if (_file.exists()) {
							if (isUpPlan) {
								int lineID = _djLine.getLineID();
								String planFileName = AppConst.XSTDBPath()
										+ File.separator
										+ AppConst.PlanDBName(lineID);
								File planFile = new File(planFileName);
								if (planFile.exists()) {
									String resultPathString = _file.getParent();

									String sPlanFileNameString = resultPathString
											+ File.separator
											+ AppConst.PlanDBName(lineID);
									FileUtils.copyFile(planFileName,
											sPlanFileNameString);
								}
							}

							ZipUtils.zipFolder(
									_file.getParent(),
									AppConst.XSTZipResultPath()
											+ _djLine.getLineID());
							if(uploadRes.UploadResultDB(
									AppContext.getAppVersion(context),
									context,
									mUploadProgBarHandler,
									AppConst.XSTZipResultPath()
											+ _djLine.getLineID())){
								// 上传完临时数据后，有视频缩略图的话，删除缩略图
								File file = new File(
										AppConst.XSTTempThumbnailImagePath());
								if (_djLine.getLineID() == 0
										&& file.list().length > 0) {
									File[] files = file.listFiles();
									for (File f : files) {
										f.delete();
									}
								}
								// 插入操作日志
								ResponseLogInfoHelper.getHelper(AppConfig.ANDROID_DATA_UPLOADING, 
										true, 
										AppConfig.DATA_UPLOADING_SUCCEED
											+ "[" + _djLine.getLineID() + "]",
										AppConst.CommunicationType_Wireless)
										.ResponseLogInfoToServer();
							}else{
								isSucceed=false;
								Message _msg = Message.obtain();
								_msg.what = -1;
								_msg.obj = context
										.getString(R.string.cumm_cummdownload_uploadresultfilefailed);
								mUploadProgBarHandler.sendMessage(_msg);
								
								// 插入操作日志
								ResponseLogInfoHelper.getHelper(AppConfig.ANDROID_DATA_UPLOADING, 
										false, 
										AppConfig.DATA_UPLOADING_DEFEATED
											+ "[" + _djLine.getLineID() + "]",
										AppConst.CommunicationType_Wireless)
										.ResponseLogInfoToServer();
							}
						}
					} catch (Exception e) {
						isSucceed=false;
						
						Message _msg = Message.obtain();
						_msg.what = -1;
						_msg.obj = context
								.getString(R.string.cumm_cummdownload_uploadresultfilefailed)
								+ e.getMessage();
						mUploadProgBarHandler.sendMessage(_msg);
						
						// 插入操作日志
						ResponseLogInfoHelper.getHelper(AppConfig.ANDROID_DATA_UPLOADING, 
								false, 
								AppConfig.DATA_UPLOADING_DEFEATED
									+ "[" + _djLine.getLineID() + "]",
								AppConst.CommunicationType_Wireless)
								.ResponseLogInfoToServer();
					}
				}
				if(isSucceed){
					AppContext.resultDataFileListBuffer.clear();
					// 全部上传完成
					Message _msg = Message.obtain();
					_msg.what = 2;
					mUploadProgBarHandler.sendMessage(_msg);
				}				
			}
		}.start();
	}
}
