package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_AppUser;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_APP_USER.
*/
public class Z_AppUserDao extends AbstractDao<Z_AppUser, Void> {

    public static final String TABLENAME = "Z_APPUSER";

    /**
     * Properties of entity Z_AppUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppUser_ID = new Property(0, String.class, "AppUser_ID", false, "APPUSER_ID");
        public final static Property AppAccount_TX = new Property(1, String.class, "AppAccount_TX", false, "APPACCOUNT_TX");
        public final static Property AppUser_CD = new Property(2, String.class, "AppUser_CD", false, "APPUSER_CD");
        public final static Property Name_TX = new Property(3, String.class, "Name_TX", false, "NAME_TX");
        public final static Property XJQPWD_TX = new Property(4, String.class, "XJQPWD_TX", false, "XJQPWD_TX");
        public final static Property LastVisitDate_DT = new Property(5, String.class, "LastVisitDate_DT", false, "LASTVISITDATE_DT");
        public final static Property EncrytionType_TX = new Property(6, String.class, "EncrytionType_TX", false, "ENCRYTIONTYPE_TX");
    };


    public Z_AppUserDao(DaoConfig config) {
        super(config);
    }
    
    public Z_AppUserDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_APP_USER' (" + //
                "'APP_USER_ID' TEXT NOT NULL ," + // 0: AppUser_ID
                "'APP_ACCOUNT_TX' TEXT," + // 1: AppAccount_TX
                "'APP_USER_CD' TEXT NOT NULL ," + // 2: AppUser_CD
                "'NAME_TX' TEXT NOT NULL ," + // 3: Name_TX
                "'XJQPWD_TX' TEXT," + // 4: XJQPWD_TX
                "'LAST_VISIT_DATE_DT' TEXT," + // 5: LastVisitDate_DT
                "'ENCRYTION_TYPE_TX' TEXT);"); // 6: EncrytionType_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_APP_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_AppUser entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getAppUser_ID());
 
        String AppAccount_TX = entity.getAppAccount_TX();
        if (AppAccount_TX != null) {
            stmt.bindString(2, AppAccount_TX);
        }
        stmt.bindString(3, entity.getAppUser_CD());
        stmt.bindString(4, entity.getName_TX());
 
        String XJQPWD_TX = entity.getXJQPWD_TX();
        if (XJQPWD_TX != null) {
            stmt.bindString(5, XJQPWD_TX);
        }
 
        String LastVisitDate_DT = entity.getLastVisitDate_DT();
        if (LastVisitDate_DT != null) {
            stmt.bindString(6, LastVisitDate_DT);
        }
 
        String EncrytionType_TX = entity.getEncrytionType_TX();
        if (EncrytionType_TX != null) {
            stmt.bindString(7, EncrytionType_TX);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_AppUser readEntity(Cursor cursor, int offset) {
        Z_AppUser entity = new Z_AppUser( //
            cursor.getString(offset + 0), // AppUser_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AppAccount_TX
            cursor.getString(offset + 2), // AppUser_CD
            cursor.getString(offset + 3), // Name_TX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // XJQPWD_TX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LastVisitDate_DT
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // EncrytionType_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_AppUser entity, int offset) {
        entity.setAppUser_ID(cursor.getString(offset + 0));
        entity.setAppAccount_TX(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppUser_CD(cursor.getString(offset + 2));
        entity.setName_TX(cursor.getString(offset + 3));
        entity.setXJQPWD_TX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastVisitDate_DT(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEncrytionType_TX(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_AppUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_AppUser entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
