package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.GPSPosition;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GPSPOSITION.
 */
public class GPSPositionDao extends AbstractDao<GPSPosition, Void> {

	public static final String TABLENAME = "GPSPOSITION";

	/**
	 * Properties of entity GPSPosition.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property XJQGUID_TX = new Property(0, String.class,
				"XJQGUID_TX", false, "XJQGUID_TX");
		public final static Property XJQ_CD = new Property(1, String.class,
				"XJQ_CD", false, "XJQ_CD");
		public final static Property Line_ID = new Property(2, String.class,
				"Line_ID", false, "LINE_ID");
		public final static Property AppUser_CD = new Property(3, String.class,
				"AppUser_CD", false, "APPUSER_CD");
		public final static Property AppUserName_TX = new Property(4,
				String.class, "AppUserName_TX", false, "APPUSERNAME_TX");
		public final static Property ID_CD = new Property(5, String.class,
				"ID_CD", false, "ID_CD");
		public final static Property Place_TX = new Property(6, String.class,
				"Place_TX", false, "PLACE_TX");
		public final static Property Longitude_TX = new Property(7,
				String.class, "Longitude_TX", false, "LONGITUDE_TX");
		public final static Property Latitude_TX = new Property(8,
				String.class, "Latitude_TX", false, "LATITUDE_TX");
		public final static Property UTC_DT = new Property(9,
				java.util.Date.class, "UTC_DT", false, "UTC_DT");
		public final static Property GPSDISTANCE_TX = new Property(10,
				String.class, "GPSDISTANCE_TX", false, "GPSDISTANCE_TX");
		public final static Property GPSCOSTTIME_TX = new Property(11,
				String.class, "GPSCOSTTIME_TX", false, "GPSCOSTTIME_TX");
		public final static Property GPSPOINTTYPE_TX = new Property(12,
				String.class, "GPSPOINTTYPE_TX", false, "GPSPOINTTYPE_TX");
		public final static Property OverSpeed_YN = new Property(13,
				String.class, "OverSpeed_YN", false, "OverSpeed_YN");
		public final static Property Speed_Num = new Property(14, String.class,
				"Speed_Num", false, "Speed_Num");
		public final static Property BDLOCATIONTYPE_TX = new Property(15,
				String.class, "BDLOCATIONTYPE_TX", false, "BDLOCATIONTYPE_TX");
	};

	public GPSPositionDao(DaoConfig config) {
		super(config);
	}

	public GPSPositionDao(DaoConfig config, DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "GPSPOSITION (" + //
				"XJQGUID_TX nvarchar(50) NOT NULL ," + // 0: XJQGUID_TX
				"XJQ_CD nvarchar(20)," + // 1: XJQ_CD
				"LINE_ID nvarchar(150)," + // 2: Line_ID
				"APPUSER_CD nvarchar(30)," + // 3: AppUser_CD
				"APPUSERNAME_TX nvarchar(20)," + // 4: AppUserName_TX
				"ID_CD nvarchar(20)," + // 5: ID_CD
				"PLACE_TX nvarchar(60)," + // 6: Place_TX
				"LONGITUDE_TX nvarchar(150) NOT NULL ," + // 7: Longitude_TX
				"LATITUDE_TX nvarchar(150) NOT NULL ," + // 8: Latitude_TX
				"UTC_DT datetime NOT NULL ," + // 9: UTC_DT
				"GPSDISTANCE_TX nvarchar(60) NOT NULL," + // 10
				"GPSCOSTTIME_TX nvarchar(60) NOT NULL," + // 11
				"GPSPOINTTYPE_TX nvarchar(60) NOT NULL," + // 12
				"OverSpeed_YN nvarchar(60)," + // 13
				"Speed_Num nvarchar(60)," + // 14
				"BDLOCATIONTYPE_TX nvarchar(60)" + // 15
				")");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'GPSPOSITION'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, GPSPosition entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getXJQGUID_TX());

		String XJQ_CD = entity.getXJQ_CD();
		if (XJQ_CD != null) {
			stmt.bindString(2, XJQ_CD);
		}

		String Line_ID = entity.getLine_ID();
		if (Line_ID != null) {
			stmt.bindString(3, Line_ID);
		}

		String AppUser_CD = entity.getAppUser_CD();
		if (AppUser_CD != null) {
			stmt.bindString(4, AppUser_CD);
		}

		String AppUserName_TX = entity.getAppUserName_TX();
		if (AppUserName_TX != null) {
			stmt.bindString(5, AppUserName_TX);
		}

		String ID_CD = entity.getID_CD();
		if (ID_CD != null) {
			stmt.bindString(6, ID_CD);
		}

		String Place_TX = entity.getPlace_TX();
		if (Place_TX != null) {
			stmt.bindString(7, Place_TX);
		}
		stmt.bindString(8, entity.getLongitude_TX());
		stmt.bindString(9, entity.getLatitude_TX());
		stmt.bindString(10, entity.getUTC_DT());
		stmt.bindString(11, entity.getGpsDistance_TX());
		stmt.bindString(12, entity.getGpsCostTime_TX());
		stmt.bindString(13, entity.getGpsPointType_TX());
		String OverSpeedYN = entity.getOverSpeedYN();
		if (OverSpeedYN != null) {
			stmt.bindString(14, OverSpeedYN);
		}
		String SpeedNum = entity.getSpeedNum();
		if (SpeedNum != null) {
			stmt.bindString(15, SpeedNum);
		}
		String bdLocationType_TX = entity.getBDLocationType_TX();
		if (bdLocationType_TX != null) {
			stmt.bindString(16, bdLocationType_TX);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public GPSPosition readEntity(Cursor cursor, int offset) {
		GPSPosition entity = new GPSPosition(
				//
				cursor.getString(offset + 0), // XJQGUID_TX
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // XJQ_CD
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Line_ID
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AppUser_CD
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AppUserName_TX
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ID_CD
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Place_TX
				cursor.getString(offset + 7), // Longitude_TX
				cursor.getString(offset + 8), // Latitude_TX
				cursor.getString(offset + 9), // UTC_DT
				cursor.getString(offset + 10), // Gps_Expand_TX
				cursor.getString(offset + 11), // GpsCostTime_TX
				cursor.getString(offset + 12), // piontType_TX
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13),
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14),
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15));
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, GPSPosition entity, int offset) {
		entity.setXJQGUID_TX(cursor.getString(offset + 0));
		entity.setXJQ_CD(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setLine_ID(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setAppUser_CD(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setAppUserName_TX(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setID_CD(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setPlace_TX(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setLongitude_TX(cursor.getString(offset + 7));
		entity.setLatitude_TX(cursor.getString(offset + 8));
		entity.setUTC_DT(cursor.getString(offset + 9));
		entity.setGpsDistance_TX(cursor.getString(offset + 10));
		entity.setGpsCostTime_TX(cursor.getString(offset + 11));
		entity.setGpsPointType_TX(cursor.getString(offset + 12));
		entity.setOverSpeedYN(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setSpeedNum(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setBDLocationType_TX(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(GPSPosition entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(GPSPosition entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/** @inheritdoc */
	public long InsertGPSPosition(GPSPosition entity) {
		long row = insert(entity);
		return row;
	}

	public void Operatesql(String sql) {
		SQLiteDatabase db = getDatabase();

		db.execSQL(sql);
	}

	/**
	 * 加载数据（供实时上传GPS数据）
	 * 
	 * @param loadcount
	 * @return
	 */
	public List<GPSPosition> loadforUploadJIT(int loadcount) {
		String sqlString = "select * from GPSPOSITION order by utc_dt asc limit 0,"
				+ loadcount;
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */
	public void deleteUploadedData(List<GPSPosition> uploadedData) {
		for (GPSPosition gpsPosition : uploadedData) {
			deleteDatabyCondition(gpsPosition.getUTC_DT());
		}
	}

	public void deleteDatabyCondition(String gpsdate) {
		String sql = "delete from GPSPOSITION where UTC_DT ='" + gpsdate + "'";
		db.execSQL(sql);
	}
}
