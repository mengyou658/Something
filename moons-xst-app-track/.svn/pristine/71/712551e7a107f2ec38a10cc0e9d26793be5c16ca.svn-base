package com.moons.xst.track.dao;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import android.R.integer;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.buss.DJPlan;
import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.AppConst;
import com.moons.xst.track.bean.DJ_ResultActive;
import com.moons.xst.track.bean.GPSMobjectBugResult;
import com.moons.xst.track.common.DateTimeHelper;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DJ_RESULT_ACTIVE.
 */
public class DJ_ResultActiveDao extends AbstractDao<DJ_ResultActive, Void> {

	public static final String TABLENAME = "DJ_RESULTACTIVE";

	/**
	 * Properties of entity DJ_ResultActive.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property DJ_Plan_ID = new Property(0, String.class,
				"DJ_Plan_ID", false, "DJ_PLAN_ID");
		public final static Property CompleteTime_DT = new Property(1,
				String.class, "CompleteTime_DT", false, "COMPLETETIME_DT");
		public final static Property AppUser_CD = new Property(2, String.class,
				"AppUser_CD", false, "APPUSER_CD");
		public final static Property AppUserName_TX = new Property(3,
				String.class, "AppUserName_TX", false, "APPUSERNAME_TX");
		public final static Property Result_TX = new Property(4, String.class,
				"Result_TX", false, "RESULT_TX");
		public final static Property Data8K_TX = new Property(5, byte[].class,
				"Data8K_TX", false, "DATA8K_TX");
		public final static Property Query_DT = new Property(6, String.class,
				"Query_DT", false, "QUERY_DT");
		public final static Property MObjectStateName_TX = new Property(7,
				String.class, "MObjectStateName_TX", false,
				"MOBJECTSTATENAME_TX");
		public final static Property Exception_YN = new Property(8,
				String.class, "Exception_YN", false, "EXCEPTION_YN");
		public final static Property AlarmLevel_ID = new Property(9,
				Integer.class, "AlarmLevel_ID", false, "ALARMLEVEL_ID");
		public final static Property SpecCase_YN = new Property(10,
				String.class, "SpecCase_YN", false, "SPECCASE_YN");
		public final static Property SpecCase_TX = new Property(11,
				String.class, "SpecCase_TX", false, "SPECCASE_TX");
		public final static Property Memo_TX = new Property(12, String.class,
				"Memo_TX", false, "MEMO_TX");
		public final static Property Time_NR = new Property(13, int.class,
				"Time_NR", false, "TIME_NR");
		public final static Property DataFlag_CD = new Property(14,
				String.class, "DataFlag_CD", false, "DATAFLAG_CD");
		public final static Property ShiftName_TX = new Property(15,
				String.class, "ShiftName_TX", false, "SHIFTNAME_TX");
		public final static Property ShiftGroupName_TX = new Property(16,
				String.class, "ShiftGroupName_TX", false, "SHIFTGROUPNAME_TX");
		public final static Property Ratio_NR = new Property(17, Boolean.class,
				"Ratio_NR", false, "RATIO_NR");
		public final static Property Ratio1_NR = new Property(18,
				Boolean.class, "Ratio1_NR", false, "RATIO1_NR");
		public final static Property Rate = new Property(19, Integer.class,
				"Rate", false, "RATE");
		public final static Property DataLen = new Property(20, Integer.class,
				"DataLen", false, "DATALEN");
		public final static Property LastResult_TX = new Property(21,
				String.class, "LastResult_TX", false, "LASTRESULT_TX");
		public final static Property TransInfo_TX = new Property(22,
				String.class, "TransInfo_TX", false, "TRANSINFO_TX");
		public final static Property VibParam_TX = new Property(23,
				String.class, "VibParam_TX", false, "VIBPARAM_TX");
		public final static Property FeatureValue_TX = new Property(24,
				String.class, "FeatureValue_TX", false, "FEATUREVALUE_TX");
		public final static Property FFTData_TX = new Property(25,
				byte[].class, "FFTData_TX", false, "FFTDATA_TX");
	};

	public DJ_ResultActiveDao(DaoConfig config) {
		super(config);
	}

	public DJ_ResultActiveDao(DaoConfig config, DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "DJ_RESULTACTIVE (" + //
				"DJ_PLAN_ID nvarchar(400) NOT NULL ," + // 0: DJ_Plan_ID
				"COMPLETETIME_DT datetime NOT NULL ," + // 1: CompleteTime_DT
				"APPUSER_CD nvarchar(100) NOT NULL ," + // 2: AppUser_CD
				"APPUSERNAME_TX nvarchar(100)," + // 3: AppUserName_TX
				"RESULT_TX nvarchar(100) NOT NULL ," + // 4: Result_TX
				"DATA8K_TX IMAGE," + // 5: Data8K_TX
				"QUERY_DT datetime NOT NULL ," + // 6: Query_DT
				"MOBJECTSTATENAME_TX nvarchar(100)," + // 7:
														// MObjectStateName_TX
				"EXCEPTION_YN nvarchar(1) NOT NULL ," + // 8: Exception_YN
				"ALARMLEVEL_ID INTEGER," + // 9: AlarmLevel_ID
				"SPECCASE_YN nvarchar(1) NOT NULL ," + // 10: SpecCase_YN
				"SPECCASE_TX nvarchar(400)," + // 11: SpecCase_TX
				"MEMO_TX nvarchar(160)," + // 12: Memo_TX
				"TIME_NR INTEGER NOT NULL ," + // 13: Time_NR
				"DATAFLAG_CD nvarchar(1) NOT NULL ," + // 14: DataFlag_CD
				"SHIFTNAME_TX nvarchar(100)," + // 15: ShiftName_TX
				"SHIFTGROUPNAME_TX nvarchar(100)," + // 16: ShiftGroupName_TX
				"RATIO_NR INTEGER," + // 17: Ratio_NR
				"RATIO1_NR INTEGER," + // 18: Ratio1_NR
				"RATE INTEGER," + // 19: Rate
				"DATALEN INTEGER," + // 20: DataLen
				"LASTRESULT_TX nvarchar(100)," + // 21: LastResult_TX
				"TRANSINFO_TX nvarchar(500)," + // 22: TransInfo_TX
				"VIBPARAM_TX nvarchar(100)," + // 23: VibParam_TX
				"FEATUREVALUE_TX nvarchar(400)," + // 24: FeatureValue_TX
				"FFTDATA_TX IMAGE);"); // 25: FFTData_TX
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'DJ_RESULTACTIVE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DJ_ResultActive entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getDJ_Plan_ID());
		stmt.bindString(2, entity.getCompleteTime_DT());
		stmt.bindString(3, entity.getAppUser_CD());

		String AppUserName_TX = entity.getAppUserName_TX();
		if (AppUserName_TX != null) {
			stmt.bindString(4, AppUserName_TX);
		}
		stmt.bindString(5, entity.getResult_TX());

		byte[] Data8K_TX = entity.getData8K_TX();
		if (Data8K_TX != null) {
			stmt.bindBlob(6, Data8K_TX);
		}
		stmt.bindString(7, entity.getQuery_DT());

		String MObjectStateName_TX = entity.getMObjectStateName_TX();
		if (MObjectStateName_TX != null) {
			stmt.bindString(8, MObjectStateName_TX);
		}
		stmt.bindString(9, entity.getException_YN());

		Integer AlarmLevel_ID = entity.getAlarmLevel_ID();
		if (AlarmLevel_ID != null) {
			stmt.bindLong(10, AlarmLevel_ID);
		}
		stmt.bindString(11, entity.getSpecCase_YN());

		String SpecCase_TX = entity.getSpecCase_TX();
		if (SpecCase_TX != null) {
			stmt.bindString(12, SpecCase_TX);
		}

		String Memo_TX = entity.getMemo_TX();
		if (Memo_TX != null) {
			stmt.bindString(13, Memo_TX);
		}
		stmt.bindLong(14, entity.getTime_NR());
		stmt.bindString(15, entity.getDataFlag_CD());

		String ShiftName_TX = entity.getShiftName_TX();
		if (ShiftName_TX != null) {
			stmt.bindString(16, ShiftName_TX);
		}

		String ShiftGroupName_TX = entity.getShiftGroupName_TX();
		if (ShiftGroupName_TX != null) {
			stmt.bindString(17, ShiftGroupName_TX);
		}

		Boolean Ratio_NR = entity.getRatio_NR();
		if (Ratio_NR != null) {
			stmt.bindLong(18, Ratio_NR ? 1l : 0l);
		}

		Boolean Ratio1_NR = entity.getRatio1_NR();
		if (Ratio1_NR != null) {
			stmt.bindLong(19, Ratio1_NR ? 1l : 0l);
		}

		Integer Rate = entity.getRate();
		if (Rate != null) {
			stmt.bindLong(20, Rate);
		}

		Integer DataLen = entity.getDataLen();
		if (DataLen != null) {
			stmt.bindLong(21, DataLen);
		}

		String LastResult_TX = entity.getLastResult_TX();
		if (LastResult_TX != null) {
			stmt.bindString(22, LastResult_TX);
		}

		String TransInfo_TX = entity.getTransInfo_TX();
		if (TransInfo_TX != null) {
			stmt.bindString(23, TransInfo_TX);
		}

		String VibParam_TX = entity.getVibParam_TX();
		if (VibParam_TX != null) {
			stmt.bindString(24, VibParam_TX);
		}

		String FeatureValue_TX = entity.getFeatureValue_TX();
		if (FeatureValue_TX != null) {
			stmt.bindString(25, FeatureValue_TX);
		}

		byte[] FFTData_TX = entity.getFFTData_TX();
		if (FFTData_TX != null) {
			stmt.bindBlob(26, FFTData_TX);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public DJ_ResultActive readEntity(Cursor cursor, int offset) {
		DJ_ResultActive entity = new DJ_ResultActive(
				//
				cursor.getString(offset + 0), // DJ_Plan_ID
				cursor.getString(offset + 1), // CompleteTime_DT
				cursor.getString(offset + 2), // AppUser_CD
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AppUserName_TX
				cursor.getString(offset + 4), // Result_TX
				cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // Data8K_TX
				cursor.getString(offset + 6), // Query_DT
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // MObjectStateName_TX
				cursor.getString(offset + 8), // Exception_YN
				cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // AlarmLevel_ID
				cursor.getString(offset + 10), // SpecCase_YN
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // SpecCase_TX
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // Memo_TX
				cursor.getInt(offset + 13), // Time_NR
				cursor.getString(offset + 14), // DataFlag_CD
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // ShiftName_TX
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // ShiftGroupName_TX
				cursor.isNull(offset + 17) ? null : cursor
						.getShort(offset + 17) != 0, // Ratio_NR
				cursor.isNull(offset + 18) ? null : cursor
						.getShort(offset + 18) != 0, // Ratio1_NR
				cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // Rate
				cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // DataLen
				cursor.isNull(offset + 21) ? null : cursor
						.getString(offset + 21), // LastResult_TX
				cursor.isNull(offset + 22) ? null : cursor
						.getString(offset + 22), // TransInfo_TX
				cursor.isNull(offset + 23) ? null : cursor
						.getString(offset + 23), // VibParam_TX
				cursor.isNull(offset + 24) ? null : cursor
						.getString(offset + 24), // FeatureValue_TX
				cursor.isNull(offset + 25) ? null : cursor.getBlob(offset + 25) // FFTData_TX
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DJ_ResultActive entity, int offset) {
		entity.setDJ_Plan_ID(cursor.getString(offset + 0));
		entity.setCompleteTime_DT(cursor.getString(offset + 1));
		entity.setAppUser_CD(cursor.getString(offset + 2));
		entity.setAppUserName_TX(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setResult_TX(cursor.getString(offset + 4));
		entity.setData8K_TX(cursor.isNull(offset + 5) ? null : cursor
				.getBlob(offset + 5));
		entity.setQuery_DT(cursor.getString(offset + 6));
		entity.setMObjectStateName_TX(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setException_YN(cursor.getString(offset + 8));
		entity.setAlarmLevel_ID(cursor.isNull(offset + 9) ? null : cursor
				.getInt(offset + 9));
		entity.setSpecCase_YN(cursor.getString(offset + 10));
		entity.setSpecCase_TX(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setMemo_TX(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setTime_NR(cursor.getInt(offset + 13));
		entity.setDataFlag_CD(cursor.getString(offset + 14));
		entity.setShiftName_TX(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setShiftGroupName_TX(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setRatio_NR(cursor.isNull(offset + 17) ? null : cursor
				.getShort(offset + 17) != 0);
		entity.setRatio1_NR(cursor.isNull(offset + 18) ? null : cursor
				.getShort(offset + 18) != 0);
		entity.setRate(cursor.isNull(offset + 19) ? null : cursor
				.getInt(offset + 19));
		entity.setDataLen(cursor.isNull(offset + 20) ? null : cursor
				.getInt(offset + 20));
		entity.setLastResult_TX(cursor.isNull(offset + 21) ? null : cursor
				.getString(offset + 21));
		entity.setTransInfo_TX(cursor.isNull(offset + 22) ? null : cursor
				.getString(offset + 22));
		entity.setVibParam_TX(cursor.isNull(offset + 23) ? null : cursor
				.getString(offset + 23));
		entity.setFeatureValue_TX(cursor.isNull(offset + 24) ? null : cursor
				.getString(offset + 24));
		entity.setFFTData_TX(cursor.isNull(offset + 25) ? null : cursor
				.getBlob(offset + 25));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(DJ_ResultActive entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(DJ_ResultActive entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public List<DJ_ResultActive> loadOneDJResult(String planID,
			String startTime, String endTime) {
		String sqlString = "select * from DJ_RESULTACTIVE where DJ_PLAN_ID='"
				+ planID + "' " + "and COMPLETETIME_DT >='" + startTime
				+ "' and COMPLETETIME_DT <= '" + endTime + "'"
				+ " and SPECCASE_TX = ''";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	public List<DJ_ResultActive> loadOneDJResult(int loadcount) {
		String sqlString = "Select * from DJ_ResultActive order by CompleteTime_DT ASC limit 0,"
				+ loadcount;
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	public List<DJ_ResultActive> loadOneDJResultForCaseXJ(String planID,
			String conditionStr) {
		String sqlString = "select * from DJ_RESULTACTIVE where DJ_PLAN_ID = '"
				+ planID + "' and TransInfo_TX like '%" + conditionStr + "%'";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * @param entity
	 * @param mDjPlan
	 */
	public void updateDJResult(DJ_ResultActive entity, DJPlan mDjPlan) {
		String sqlString = "update DJ_RESULTACTIVE set COMPLETETIME_DT ='"
				+ entity.getCompleteTime_DT() + "',RESULT_TX ='"
				+ entity.getResult_TX()
				/*
				 * + "',LASTRESULT_TX ='" + entity.getLastResult_TX()
				 */
				+ "',MEMO_TX ='" + entity.getMemo_TX() + "',EXCEPTION_YN ='"
				+ entity.getException_YN() + "',ALARMLEVEL_ID ='"
				+ entity.getAlarmLevel_ID() + "'";
		if (mDjPlan.getDJPlan().getDataType_CD()
				.equalsIgnoreCase(AppConst.DJPLAN_DATACODE_CZ)
				&& entity.getData8K_TX() != null) {

			ContentValues values = new ContentValues();
			values.put("Data8K_TX", entity.getData8K_TX());
			values.put("FFTDATA_TX", entity.getFFTData_TX());
			db.update(
					"DJ_RESULTACTIVE",
					values,
					"DJ_PLAN_ID='"
							+ mDjPlan.getDJPlan().getDJ_Plan_ID()
							+ "' "
							+ "and COMPLETETIME_DT >='"
							+ DateTimeHelper.DateToString(mDjPlan.GetCycle()
									.getTaskBegin())
							+ "' and COMPLETETIME_DT <= '"
							+ DateTimeHelper.DateToString(mDjPlan.GetCycle()
									.getTaskEnd()) + "'"
							+ " and SPECCASE_TX = ''", null);
			/*
			 * sqlString += ", Data8K_TX = " + entity.getData8K_TX() +
			 * ", FFTDATA_TX = " + entity.getFFTData_TX() + "";
			 */
		}
		sqlString += " where DJ_PLAN_ID='"
				+ mDjPlan.getDJPlan().getDJ_Plan_ID()
				+ "' "
				+ "and COMPLETETIME_DT >='"
				+ DateTimeHelper
						.DateToString(mDjPlan.GetCycle().getTaskBegin())
				+ "' and COMPLETETIME_DT <= '"
				+ DateTimeHelper.DateToString(mDjPlan.GetCycle().getTaskEnd())
				+ "'" + " and SPECCASE_TX = ''";
		db.execSQL(sqlString);
	}
	
	public void updateDJResultForDJPC(DJ_ResultActive entity, DJPlan mDjPlan) {
		String sqlString = "update DJ_RESULTACTIVE set COMPLETETIME_DT ='"
				+ entity.getCompleteTime_DT() + "',RESULT_TX ='"
				+ entity.getResult_TX()
				/*
				 * + "',LASTRESULT_TX ='" + entity.getLastResult_TX()
				 */
				+ "',MEMO_TX ='" + entity.getMemo_TX() + "',EXCEPTION_YN ='"
				+ entity.getException_YN() + "',ALARMLEVEL_ID ='"
				+ entity.getAlarmLevel_ID() + "'";
		if (mDjPlan.getDJPlan().getDataType_CD()
				.equalsIgnoreCase(AppConst.DJPLAN_DATACODE_CZ)
				&& entity.getData8K_TX() != null) {

			ContentValues values = new ContentValues();
			values.put("Data8K_TX", entity.getData8K_TX());
			values.put("FFTDATA_TX", entity.getFFTData_TX());
			db.update(
					"DJ_RESULTACTIVE",
					values,
					"DJ_PLAN_ID='"
							+ mDjPlan.getDJPlan().getDJ_Plan_ID()
							+ "' "
							+ "and COMPLETETIME_DT >='"
							+ mDjPlan.getDJPlan().getDisStart_TM()
							+ "' and COMPLETETIME_DT <= '"
							+ mDjPlan.getDJPlan().getDisEnd_TM() + "'"
							+ " and SPECCASE_TX = ''", null);
			/*
			 * sqlString += ", Data8K_TX = " + entity.getData8K_TX() +
			 * ", FFTDATA_TX = " + entity.getFFTData_TX() + "";
			 */
		}
		sqlString += " where DJ_PLAN_ID='"
				+ mDjPlan.getDJPlan().getDJ_Plan_ID()
				+ "' "
				+ "and COMPLETETIME_DT >='"
				+ mDjPlan.getDJPlan().getDisStart_TM()
				+ "' and COMPLETETIME_DT <= '"
				+ mDjPlan.getDJPlan().getDisEnd_TM()
				+ "'" + " and SPECCASE_TX = ''";
		db.execSQL(sqlString);
	}

	public void updateDJResultForCaseXJ(DJ_ResultActive entity, DJPlan mDjPlan,
			String mConditionStr) {
		String sqlString = "update DJ_RESULTACTIVE set COMPLETETIME_DT ='"
				+ entity.getCompleteTime_DT() + "',RESULT_TX ='"
				+ entity.getResult_TX()
				/*
				 * + "',LASTRESULT_TX ='" + entity.getLastResult_TX()
				 */
				+ "',MEMO_TX ='" + entity.getMemo_TX() + "',EXCEPTION_YN ='"
				+ entity.getException_YN() + "',ALARMLEVEL_ID ='"
				+ entity.getAlarmLevel_ID() + "'";
		if (mDjPlan.getDJPlan().getDataType_CD()
				.equalsIgnoreCase(AppConst.DJPLAN_DATACODE_CZ)
				&& entity.getData8K_TX() != null) {
			ContentValues values = new ContentValues();
			values.put("Data8K_TX", entity.getData8K_TX());
			values.put("FFTDATA_TX", entity.getFFTData_TX());
			db.update("DJ_RESULTACTIVE", values, "DJ_PLAN_ID='"
					+ mDjPlan.getDJPlan().getDJ_Plan_ID()
					+ "' and TransInfo_TX like '%" + mConditionStr + "%'", null);
			/*
			 * sqlString += ", Data8K_TX = " + entity.getData8K_TX() +
			 * ", FFTDATA_TX = " + entity.getFFTData_TX() + "";
			 */
		}
		sqlString += " where DJ_PLAN_ID='"
				+ mDjPlan.getDJPlan().getDJ_Plan_ID()
				+ "' and TransInfo_TX like '%" + mConditionStr + "%'";
		db.execSQL(sqlString);
	}

	public List<DJ_ResultActive> loadDJResultForCaseXJJIT(String djplanIDStr,
			String timeid) {
		String sqlString = "select * from DJ_RESULTACTIVE where DJ_PLAN_ID in ("
				+ djplanIDStr + ") and TransInfo_TX like '%|" + timeid + "'";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */
	public boolean deleteDJResultUploadedData(List<DJ_ResultActive> uploadedData) {
		List<DJ_ResultActive> lineList = null;
		boolean isDeleted = false;
		List<DJ_ResultActive> uploadedDataCopy = new CopyOnWriteArrayList<DJ_ResultActive>();
		for (DJ_ResultActive djResult : uploadedData) {
			uploadedDataCopy.add(djResult);
		}
		for (DJ_ResultActive djResult : uploadedDataCopy) {
			deleteDatabyCondition(djResult.getDJ_Plan_ID(),
					djResult.getCompleteTime_DT());
			uploadedData.remove(djResult);
			lineList = uploadedData;
		}
		if (lineList != null) {
			if (lineList.isEmpty()) {
				isDeleted = true;
			} else {
				isDeleted = false;
			}
		}
		return isDeleted;
	}

	public void deleteDatabyCondition(String _ID, String completeDT) {
		String sql = "Delete from DJ_ResultActive where DJ_Plan_ID ='" + _ID
				+ "' and CompleteTime_DT = '" + completeDT + "'";
		db.execSQL(sql);
	}
}
