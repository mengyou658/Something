package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.GPSPositionForInit;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GPSPOSITION_FOR_INIT.
 */
public class GPSPositionForInitDao extends
		AbstractDao<GPSPositionForInit, Void> {

	public static final String TABLENAME = "GPSPOSITIONFORINIT";

	/**
	 * Properties of entity GPSPositionForInit.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property GPSPosition_ID = new Property(0,
				int.class, "GPSPosition_ID", false, "GPSPOSITION_ID");
		public final static Property GPSPosition_CD = new Property(1,
				String.class, "GPSPosition_CD", false, "GPSPOSITION_CD");
		public final static Property XJQMark = new Property(2, String.class,
				"XJQMark", false, "XJQMARK");
		public final static Property Longitude = new Property(3, String.class,
				"Longitude", false, "LONGITUDE");
		public final static Property Latitude = new Property(4, String.class,
				"Latitude", false, "LATITUDE");
		public final static Property UTCDateTime = new Property(5,
				String.class, "UTCDateTime", false, "UTCDATETIME");
		public final static Property GPSDesc = new Property(6, String.class,
				"GPSDesc", false, "GPSDESC");
		public final static Property LineID = new Property(7, String.class,
				"LineID", false, "LINEID");
	};

	public GPSPositionForInitDao(DaoConfig config) {
		super(config);
	}

	public GPSPositionForInitDao(DaoConfig config, DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "GPSPOSITIONFORINIT (" + //
				"GPSPOSITION_ID INTEGER NOT NULL ," + // 0: GPSPosition_ID
				"GPSPOSITION_CD nvarchar(50) NOT NULL ," + // 1: GPSPosition_CD
				"XJQMARK nvarchar(150) NOT NULL ," + // 2: XJQMark
				"LONGITUDE nvarchar(150) NOT NULL ," + // 3: Longitude
				"LATITUDE nvarchar(150) NOT NULL ," + // 4: Latitude
				"UTCDATETIME nvarchar(150) NOT NULL ," + // 5: UTCDateTime
				"GPSDESC nvarchar(150) NOT NULL ," + // 6: GPSDesc
				"LINEID nvarchar(150) NOT NULL );"); // 7: LineID
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'GPSPOSITIONFORINIT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, GPSPositionForInit entity) {
		stmt.clearBindings();
		stmt.bindLong(1, entity.getGPSPosition_ID());
		stmt.bindString(2, entity.getGPSPosition_CD());
		stmt.bindString(3, entity.getXJQMark());
		stmt.bindString(4, entity.getLongitude());
		stmt.bindString(5, entity.getLatitude());
		stmt.bindString(6, entity.getUTCDateTime());
		stmt.bindString(7, entity.getGPSDesc());
		stmt.bindString(8, entity.getLineID());
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public GPSPositionForInit readEntity(Cursor cursor, int offset) {
		GPSPositionForInit entity = new GPSPositionForInit( //
				cursor.getInt(offset + 0), // GPSPosition_ID
				cursor.getString(offset + 1), // GPSPosition_CD
				cursor.getString(offset + 2), // XJQMark
				cursor.getString(offset + 3), // Longitude
				cursor.getString(offset + 4), // Latitude
				cursor.getString(offset + 5), // UTCDateTime
				cursor.getString(offset + 6), // GPSDesc
				cursor.getString(offset + 7) // LineID
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, GPSPositionForInit entity, int offset) {
		entity.setGPSPosition_ID(cursor.getInt(offset + 0));
		entity.setGPSPosition_CD(cursor.getString(offset + 1));
		entity.setXJQMark(cursor.getString(offset + 2));
		entity.setLongitude(cursor.getString(offset + 3));
		entity.setLatitude(cursor.getString(offset + 4));
		entity.setUTCDateTime(cursor.getString(offset + 5));
		entity.setGPSDesc(cursor.getString(offset + 6));
		entity.setLineID(cursor.getString(offset + 7));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(GPSPositionForInit entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(GPSPositionForInit entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}
	/**
	 * 加载数据（供实时上传）
	 * 
	 * @param loadcount
	 * @return
	 */
	public List<GPSPositionForInit> loadforUploadJIT(int loadcount) {
		String sqlString = "select * from GPSPOSITIONFORINIT order by GPSPosition_ID asc limit 0,"
				+ loadcount;
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}
	/**
	 * 删除一组已上传数据
	 * 
	 * @param uploadedData
	 */

	public void deleteUploadedData(List<GPSPositionForInit> uploadedData) {
		for (GPSPositionForInit rst : uploadedData) {
			deleteDatabyCondition(rst.getGPSPosition_ID());
		}
	}

	private void deleteDatabyCondition(int gpsPosition_ID) {
		String sql = "delete from GPSPOSITIONFORINIT where GPSPosition_ID ='" + gpsPosition_ID
				+ "'";
		db.execSQL(sql);
		
	}

}
