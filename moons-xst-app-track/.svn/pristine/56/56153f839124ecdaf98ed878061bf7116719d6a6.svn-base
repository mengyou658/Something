package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_Shift;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_SHIFT.
*/
public class Z_ShiftDao extends AbstractDao<Z_Shift, Void> {

    public static final String TABLENAME = "Z_SHIFT";

    /**
     * Properties of entity Z_Shift.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Shift_CD = new Property(0, String.class, "Shift_CD", false, "SHIFT_CD");
        public final static Property Name_TX = new Property(1, String.class, "Name_TX", false, "NAME_TX");
        public final static Property StartTime_TX = new Property(2, String.class, "StartTime_TX", false, "STARTTIME_TX");
        public final static Property EndTime_TX = new Property(3, String.class, "EndTime_TX", false, "ENDTIME_TX");
        public final static Property RStartTime_TX = new Property(4, String.class, "RStartTime_TX", false, "RSTARTTIME_TX");
        public final static Property REndTime_TX = new Property(5, String.class, "REndTime_TX", false, "RENDTIME_TX");
    };


    public Z_ShiftDao(DaoConfig config) {
        super(config);
    }
    
    public Z_ShiftDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_SHIFT' (" + //
                "'SHIFT_CD' TEXT NOT NULL ," + // 0: Shift_CD
                "'NAME_TX' TEXT NOT NULL ," + // 1: Name_TX
                "'START_TIME_TX' TEXT NOT NULL ," + // 2: StartTime_TX
                "'END_TIME_TX' TEXT NOT NULL ," + // 3: EndTime_TX
                "'RSTART_TIME_TX' TEXT," + // 4: RStartTime_TX
                "'REND_TIME_TX' TEXT);"); // 5: REndTime_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_SHIFT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_Shift entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getShift_CD());
        stmt.bindString(2, entity.getName_TX());
        stmt.bindString(3, entity.getStartTime_TX());
        stmt.bindString(4, entity.getEndTime_TX());
 
        String RStartTime_TX = entity.getRStartTime_TX();
        if (RStartTime_TX != null) {
            stmt.bindString(5, RStartTime_TX);
        }
 
        String REndTime_TX = entity.getREndTime_TX();
        if (REndTime_TX != null) {
            stmt.bindString(6, REndTime_TX);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_Shift readEntity(Cursor cursor, int offset) {
        Z_Shift entity = new Z_Shift( //
            cursor.getString(offset + 0), // Shift_CD
            cursor.getString(offset + 1), // Name_TX
            cursor.getString(offset + 2), // StartTime_TX
            cursor.getString(offset + 3), // EndTime_TX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RStartTime_TX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // REndTime_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_Shift entity, int offset) {
        entity.setShift_CD(cursor.getString(offset + 0));
        entity.setName_TX(cursor.getString(offset + 1));
        entity.setStartTime_TX(cursor.getString(offset + 2));
        entity.setEndTime_TX(cursor.getString(offset + 3));
        entity.setRStartTime_TX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setREndTime_TX(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_Shift entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_Shift entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
