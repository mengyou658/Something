package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.ComDaoSession;
import com.moons.xst.track.bean.GPSXXTempTask;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEMP_GPSTASK__ID.
*/
public class GPSXXTempTaskDao extends AbstractDao<GPSXXTempTask, String> {

    public static final String TABLENAME = "GPSXXTempTask";

    /**
     * Properties of entity TempGPSTask_ID.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TempGPSTask_ID = new Property(0, String.class, "TempGPSTask_ID", true, "TEMPGPSTASK_ID");
        public final static Property TaskName_tx = new Property(1, String.class, "taskName_tx", false, "TASKNAME_TX");
        public final static Property CreateUserName_tx = new Property(2, String.class, "createUserName_tx", false, "CREATEUSERNAME_TX");
        public final static Property Post_id = new Property(3, String.class, "Post_id", false, "POST_ID");
        public final static Property Begin_dt = new Property(4, String.class, "begin_dt", false, "BEGIN_DT");
        public final static Property End_dt = new Property(5, String.class, "end_dt", false, "END_DT");
        public final static Property Xjq_cd = new Property(6, String.class, "xjq_cd", false, "XJQ_CD");
        public final static Property Xjq_guid = new Property(7, String.class, "xjq_guid", false, "XJQ_GUID");
        public final static Property Taskdesc_tx = new Property(8, String.class, "taskdesc_tx", false, "TASKDESC_TX");
        public final static Property EventType_id = new Property(9, String.class, "EventType_id", false, "EVENTTYPE_ID");
        public final static Property EventDesc_tx = new Property(10, String.class, "EventDesc_tx", false, "EVENTDESC_TX");
        public final static Property Create_dt = new Property(11, String.class, "create_dt", false, "CREATE_DT");
        public final static Property Distribute_dt = new Property(12, String.class, "Distribute_dt", false, "DISTRIBUTE_DT");
        public final static Property TaskStatus_tx = new Property(13, String.class, "TaskStatus_tx", false, "TASKSTATUS_TX");
        public final static Property Complete_dt = new Property(14, String.class, "Complete_dt", false, "COMPLETE_DT");
        public final static Property Accept_dt = new Property(15, String.class, "accept_dt", false, "ACCEPT_DT");
        public final static Property TaskJD_tx = new Property(16, String.class, "TaskJD_tx", false, "LON_TX");
        public final static Property TaskWD_tx = new Property(17, String.class, "TaskWD_tx", false, "LAT_TX");
    };


    public GPSXXTempTaskDao(DaoConfig config) {
        super(config);
    }
    
    public GPSXXTempTaskDao(DaoConfig config, ComDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPSXXTempTask' (" + //
                "'TEMPGPSTASK_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: TempGPSTask_ID
                "'TASKNAME_TX' TEXT  ," + // 1: taskName_tx
                "'CREATEUSERNAME_TX' TEXT  ," + // 2: createUserName_tx
                "'POST_ID' TEXT  ," + // 3: Post_id
                "'BEGIN_DT' TEXT  ," + // 4: begin_dt
                "'END_DT' TEXT  ," + // 5: end_dt
                "'XJQ_CD' TEXT ," + // 6: xjq_cd
                "'XJQ_GUID' TEXT  ," + // 7: xjq_guid
                "'TASKDESC_TX' TEXT  ," + // 8: taskdesc_tx
                "'EVENTTYPE_ID' TEXT  ," + // 9: EventType_id
                "'EVENTDESC_TX' TEXT  ," + // 10: EventDesc_tx
                "'CREATE_DT' TEXT  ," + // 11: create_dt
                "'DISTRIBUTE_DT' TEXT  ," + // 12: Distribute_dt
                "'TASKSTATUS_TX' TEXT  ," + // 13: TaskStatus_tx
                "'COMPLETE_DT' TEXT  ," + // 14: Complete_dt
                "'ACCEPT_DT' TEXT  ," + // 15: accept_dt
                "'LON_TX' TEXT  ," + // 16: TaskJD_tx
                "'LAT_TX' TEXT  );"); // 17: TaskWD_tx
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPSXXTempTask'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GPSXXTempTask entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTempGPSTask_ID());
 
        String taskName_tx = entity.getTaskName_tx();
        if (taskName_tx != null) {
            stmt.bindString(2, taskName_tx);
        }
 
        String createUserName_tx = entity.getCreateUserName_tx();
        if (createUserName_tx != null) {
            stmt.bindString(3, createUserName_tx);
        }
 
        String Post_id = entity.getPost_id();
        if (Post_id != null) {
            stmt.bindString(4, Post_id);
        }
 
        String begin_dt = entity.getBegin_dt();
        if (begin_dt != null) {
            stmt.bindString(5, begin_dt);
        }
 
        String end_dt = entity.getEnd_dt();
        if (end_dt != null) {
            stmt.bindString(6, end_dt);
        }
 
        String xjq_cd = entity.getXjq_cd();
        if (xjq_cd != null) {
            stmt.bindString(7, xjq_cd);
        }
 
        String xjq_guid = entity.getXjq_guid();
        if (xjq_guid != null) {
            stmt.bindString(8, xjq_guid);
        }
 
        String taskdesc_tx = entity.getTaskdesc_tx();
        if (taskdesc_tx != null) {
            stmt.bindString(9, taskdesc_tx);
        }
 
        String EventType_id = entity.getEventType_id();
        if (EventType_id != null) {
            stmt.bindString(10, EventType_id);
        }
 
        String EventDesc_tx = entity.getEventDesc_tx();
        if (EventDesc_tx != null) {
            stmt.bindString(11, EventDesc_tx);
        }
 
        String create_dt = entity.getCreate_dt();
        if (create_dt != null) {
            stmt.bindString(12, create_dt);
        }
 
        String Distribute_dt = entity.getDistribute_dt();
        if (Distribute_dt != null) {
            stmt.bindString(13, Distribute_dt);
        }
 
        String TaskStatus_tx = entity.getTaskStatus_tx();
        if (TaskStatus_tx != null) {
            stmt.bindString(14, TaskStatus_tx);
        }
 
        String Complete_dt = entity.getComplete_dt();
        if (Complete_dt != null) {
            stmt.bindString(15, Complete_dt);
        }
 
        String accept_dt = entity.getAccept_dt();
        if (accept_dt != null) {
            stmt.bindString(16, accept_dt);
        }
 
        String TaskJD_tx = entity.getTaskJD_tx();
        if (TaskJD_tx != null) {
            stmt.bindString(17, TaskJD_tx);
        }
 
        String TaskWD_tx = entity.getTaskWD_tx();
        if (TaskWD_tx != null) {
            stmt.bindString(18, TaskWD_tx);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GPSXXTempTask readEntity(Cursor cursor, int offset) {
    	GPSXXTempTask entity = new GPSXXTempTask( //
            cursor.getString(offset + 0), // TempGPSTask_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskName_tx
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createUserName_tx
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Post_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // begin_dt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // end_dt
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // xjq_cd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // xjq_guid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // taskdesc_tx
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // EventType_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // EventDesc_tx
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // create_dt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Distribute_dt
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // TaskStatus_tx
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Complete_dt
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // accept_dt
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // TaskJD_tx
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // TaskWD_tx
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GPSXXTempTask entity, int offset) {
        entity.setTempGPSTask_ID(cursor.getString(offset + 0));
        entity.setTaskName_tx(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateUserName_tx(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPost_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBegin_dt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnd_dt(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXjq_cd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setXjq_guid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTaskdesc_tx(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEventType_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEventDesc_tx(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreate_dt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDistribute_dt(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTaskStatus_tx(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComplete_dt(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAccept_dt(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTaskJD_tx(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTaskWD_tx(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(GPSXXTempTask entity, long rowId) {
        return entity.getTempGPSTask_ID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(GPSXXTempTask entity) {
        if(entity != null) {
            return entity.getTempGPSTask_ID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
