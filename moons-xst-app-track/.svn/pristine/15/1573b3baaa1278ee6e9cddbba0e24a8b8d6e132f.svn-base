package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.CycleByIDPos;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CYCLE_BY_IDPOS.
*/
public class CycleByIDPosDao extends AbstractDao<CycleByIDPos, Void> {

    public static final String TABLENAME = "CYCLEBYIDPOS";

    /**
     * Properties of entity CycleByIDPos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IDPos_ID = new Property(0, String.class, "IDPos_ID", false, "IDPOS_ID");
        public final static Property Cycle_ID = new Property(1, String.class, "Cycle_ID", false, "CYCLE_ID");
    };


    public CycleByIDPosDao(DaoConfig config) {
        super(config);
    }
    
    public CycleByIDPosDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CYCLE_BY_IDPOS' (" + //
                "'IDPOS_ID' TEXT NOT NULL ," + // 0: IDPos_ID
                "'CYCLE_ID' TEXT NOT NULL );"); // 1: Cycle_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CYCLE_BY_IDPOS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CycleByIDPos entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIDPos_ID());
        stmt.bindString(2, entity.getCycle_ID());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CycleByIDPos readEntity(Cursor cursor, int offset) {
        CycleByIDPos entity = new CycleByIDPos( //
            cursor.getString(offset + 0), // IDPos_ID
            cursor.getString(offset + 1) // Cycle_ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CycleByIDPos entity, int offset) {
        entity.setIDPos_ID(cursor.getString(offset + 0));
        entity.setCycle_ID(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CycleByIDPos entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CycleByIDPos entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
