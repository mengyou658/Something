package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.GPSPositionForResult;
import com.moons.xst.track.bean.GPSPositionForResultHis;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GPSPositionForResultHis.
*/
public class GPSPositionForResultHisDao extends AbstractDao<GPSPositionForResultHis, Void> {

    public static final String TABLENAME = "GPSPositionForResultHis";

    /**
     * Properties of entity GPSPositionForResultHis.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GPSPosition_ID = new Property(0, int.class, "GPSPosition_ID", false, "GPSPOSITION_ID");
        public final static Property GPSPosition_CD = new Property(1, String.class, "GPSPosition_CD", false, "GPSPOSITION_CD");
        public final static Property XJQMark = new Property(2, String.class, "XJQMark", false, "XJQMARK");
        public final static Property Longitude = new Property(3, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, String.class, "Latitude", false, "LATITUDE");
        public final static Property UTCDateTime = new Property(5, String.class, "UTCDateTime", false, "UTCDATETIME");
        public final static Property GPSDesc = new Property(6, String.class, "GPSDesc", false, "GPSDESC");
        public final static Property LineID = new Property(7, String.class, "LineID", false, "LINEID");
        public final static Property AppUser_ID = new Property(8, int.class, "AppUser_ID", false, "APPUSER_ID");
        public final static Property AppUserName_TX = new Property(9, String.class, "AppUserName_TX", false, "APPUSERNAME_TX");
        public final static Property Post_ID = new Property(10, int.class, "Post_ID", false, "POST_ID");
    };


    public GPSPositionForResultHisDao(DaoConfig config) {
        super(config);
    }
    
    public GPSPositionForResultHisDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPSPositionForResultHis' (" + //
                "'GPSPOSITION_ID' INTEGER NOT NULL ," + // 0: GPSPosition_ID
                "'GPSPOSITION_CD' TEXT NOT NULL ," + // 1: GPSPosition_CD
                "'XJQMARK' TEXT NOT NULL ," + // 2: XJQMark
                "'LONGITUDE' TEXT NOT NULL ," + // 3: Longitude
                "'LATITUDE' TEXT NOT NULL ," + // 4: Latitude
                "'UTCDATETIME' TEXT NOT NULL ," + // 5: UTCDateTime
                "'GPSDESC' TEXT NOT NULL ," + // 6: GPSDesc
                "'LINE_ID' TEXT NOT NULL ," + // 7: LineID
                "'APP_USER_ID' INTEGER NOT NULL ," + // 8: AppUser_ID
                "'APP_USER_NAME_TX' TEXT NOT NULL ," + // 9: AppUserName_TX
                "'POST_ID' INTEGER NOT NULL );"); // 10: Post_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPSPositionForResultHis'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GPSPositionForResultHis entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGPSPosition_ID());
        stmt.bindString(2, entity.getGPSPosition_CD());
        stmt.bindString(3, entity.getXJQMark());
        stmt.bindString(4, entity.getLongitude());
        stmt.bindString(5, entity.getLatitude());
        stmt.bindString(6, entity.getUTCDateTime());
        stmt.bindString(7, entity.getGPSDesc());
        stmt.bindString(8, entity.getLineID());
        stmt.bindLong(9, entity.getAppUser_ID());
        stmt.bindString(10, entity.getAppUserName_TX());
        stmt.bindLong(11, entity.getPost_ID());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public GPSPositionForResultHis readEntity(Cursor cursor, int offset) {
        GPSPositionForResultHis entity = new GPSPositionForResultHis( //
            cursor.getInt(offset + 0), // GPSPosition_ID
            cursor.getString(offset + 1), // GPSPosition_CD
            cursor.getString(offset + 2), // XJQMark
            cursor.getString(offset + 3), // Longitude
            cursor.getString(offset + 4), // Latitude
            cursor.getString(offset + 5), // UTCDateTime
            cursor.getString(offset + 6), // GPSDesc
            cursor.getString(offset + 7), // LineID
            cursor.getInt(offset + 8), // AppUser_ID
            cursor.getString(offset + 9), // AppUserName_TX
            cursor.getInt(offset + 10) // Post_ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GPSPositionForResultHis entity, int offset) {
        entity.setGPSPosition_ID(cursor.getInt(offset + 0));
        entity.setGPSPosition_CD(cursor.getString(offset + 1));
        entity.setXJQMark(cursor.getString(offset + 2));
        entity.setLongitude(cursor.getString(offset + 3));
        entity.setLatitude(cursor.getString(offset + 4));
        entity.setUTCDateTime(cursor.getString(offset + 5));
        entity.setGPSDesc(cursor.getString(offset + 6));
        entity.setLineID(cursor.getString(offset + 7));
        entity.setAppUser_ID(cursor.getInt(offset + 8));
        entity.setAppUserName_TX(cursor.getString(offset + 9));
        entity.setPost_ID(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GPSPositionForResultHis entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(GPSPositionForResultHis entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    public long insertGPSPositionForResult(GPSPositionForResult entity) {
    	GPSPositionForResultHis entityhis = new GPSPositionForResultHis();
    	entityhis.setGPSPosition_ID(entity.getGPSPosition_ID());
    	entityhis.setGPSPosition_CD(entity.getGPSPosition_CD());
    	entityhis.setXJQMark(entity.getXJQMark());
    	entityhis.setLongitude(entity.getLongitude());
    	entityhis.setLatitude(entity.getLatitude());
    	entityhis.setUTCDateTime(entity.getUTCDateTime());
    	entityhis.setGPSDesc(entity.getGPSDesc());
    	entityhis.setLineID(entity.getLineID());
    	entityhis.setAppUser_ID(entity.getAppUser_ID());
    	entityhis.setAppUserName_TX(entity.getAppUserName_TX());
    	entityhis.setPost_ID(entity.getPost_ID());
    	return this.insert(entityhis);
    }
    
    
}
