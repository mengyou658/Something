package com.moons.xst.track.dao;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJResultDAOSession;
import com.moons.xst.track.bean.DJ_PhotoByResult;
import com.moons.xst.track.bean.DJ_ResultActive;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DJ_PHOTO_BY_RESULT.
 */
public class DJ_PhotoByResultDao extends AbstractDao<DJ_PhotoByResult, Void> {

	public static final String TABLENAME = "DJ_PHOTOBYRESULT";

	/**
	 * Properties of entity DJ_PhotoByResult.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property DJ_Plan_ID = new Property(0, String.class,
				"DJ_Plan_ID", false, "DJ_PLAN_ID");
		public final static Property Partition_ID = new Property(1,
				String.class, "Partition_ID", false, "PARTITION_ID");
		public final static Property Photo_DT = new Property(2,
				java.util.Date.class, "Photo_DT", false, "PHOTO_DT");
		public final static Property GUID = new Property(3, String.class,
				"GUID", false, "GUID");
		public final static Property LCType = new Property(4, String.class,
				"LCType", false, "LCTYPE");
	};

	public DJ_PhotoByResultDao(DaoConfig config) {
		super(config);
	}

	public DJ_PhotoByResultDao(DaoConfig config, DJResultDAOSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "DJ_PHOTOBYRESULT (" + //
				"DJ_PLAN_ID nvarchar(400) NOT NULL," + // 0: DJ_Plan_ID
				"PARTITION_ID nvarchar(14) NOT NULL ," + // 1: Partition_ID
				"PHOTO_DT datetime NOT NULL ," + // 2: Photo_DT
				"GUID nvarchar(100) NOT NULL ," + // 3: GUID
				"LCTYPE nvarchar(40) NOT NULL );"); // 4: LCType
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'DJ_PHOTOBYRESULT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DJ_PhotoByResult entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getDJ_Plan_ID());
		stmt.bindString(2, entity.getPartition_ID());
		stmt.bindString(3, entity.getPhoto_DT());
		stmt.bindString(4, entity.getGUID());
		stmt.bindString(5, entity.getLCType());
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public DJ_PhotoByResult readEntity(Cursor cursor, int offset) {
		DJ_PhotoByResult entity = new DJ_PhotoByResult( //
				cursor.getString(offset + 0), // DJ_Plan_ID
				cursor.getString(offset + 1), // Partition_ID
				cursor.getString(offset + 2), // Photo_DT
				cursor.getString(offset + 3), // GUID
				cursor.getString(offset + 4) // LCType
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DJ_PhotoByResult entity, int offset) {
		entity.setDJ_Plan_ID(cursor.getString(offset + 0));
		entity.setPartition_ID(cursor.getString(offset + 1));
		entity.setPhoto_DT(cursor.getString(offset + 2));
		entity.setGUID(cursor.getString(offset + 3));
		entity.setLCType(cursor.getString(offset + 4));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(DJ_PhotoByResult entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(DJ_PhotoByResult entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public List<DJ_PhotoByResult> loadDJResultFiles(String planID,
			String completeTime) {
		String sqlString = "select * from DJ_PHOTOBYRESULT where DJ_PLAN_ID='"
				+ planID + "' " + "and PARTITION_ID ='" + completeTime + "'";
		Cursor cursor = db.rawQuery(sqlString, null);
		return loadAllAndCloseCursor(cursor);
	}

	public void deleteDJResultFiles(String planID, String completeTime,
			String fileType) {
		String sqlString = "delete from DJ_PHOTOBYRESULT where DJ_PLAN_ID='"
				+ planID + "' " + "and PARTITION_ID ='" + completeTime + "'";
		db.execSQL(sqlString);
	}

	public void deleteOneDJResultFile(DJ_PhotoByResult result) {
		String sqlString = "delete from DJ_PHOTOBYRESULT where GUID='"
				+ result.getGUID() + "'";
		db.execSQL(sqlString);
	}

	public boolean deleteDJResultForFilesUploadedData(
			List<DJ_PhotoByResult> uploadedData) {
		List<DJ_PhotoByResult> lineList = null;
		boolean isDeleted = false;
		if (uploadedData.isEmpty()) {
			return true;
		} else {
			List<DJ_PhotoByResult> uploadedDataCopy = new CopyOnWriteArrayList<DJ_PhotoByResult>();
			for (DJ_PhotoByResult file : uploadedData) {
				uploadedDataCopy.add(file);
			}
			for (DJ_PhotoByResult file : uploadedDataCopy) {
				deleteDatabyCondition(file.getGUID());
				uploadedData.remove(file);
				lineList = uploadedData;
			}
			if (lineList != null) {
				if (lineList.isEmpty()) {
					isDeleted = true;
				} else {
					isDeleted = false;
				}
			}
			return isDeleted;
		}
	}

	public void deleteDatabyCondition(String _guid) {
		String sql = "Delete from DJ_PhotoByResult where GUID ='" + _guid + "'";
		db.execSQL(sql);
	}
}
