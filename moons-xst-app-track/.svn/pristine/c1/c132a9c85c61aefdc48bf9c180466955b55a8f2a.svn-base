package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_DataCodeGroupItem;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_DATA_CODE_GROUP_ITEM.
*/
public class Z_DataCodeGroupItemDao extends AbstractDao<Z_DataCodeGroupItem, Void> {

    public static final String TABLENAME = "Z_DATACODEGROUPITEM";

    /**
     * Properties of entity Z_DataCodeGroupItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Item_ID = new Property(0, String.class, "Item_ID", false, "ITEM_ID");
        public final static Property DataCodeGroup_ID = new Property(1, int.class, "DataCodeGroup_ID", false, "DATACODEGROUP_ID");
        public final static Property Item_CD = new Property(2, String.class, "Item_CD", false, "ITEM_CD");
        public final static Property SortNo_NR = new Property(3, int.class, "SortNo_NR", false, "SORTNO_NR");
        public final static Property Name_TX = new Property(4, String.class, "Name_TX", false, "NAME_TX");
        public final static Property AlarmLevel_ID = new Property(5, Integer.class, "AlarmLevel_ID", false, "ALARMLEVEL_ID");
        public final static Property Status_CD = new Property(6, String.class, "Status_CD", false, "STATUS_CD");
    };


    public Z_DataCodeGroupItemDao(DaoConfig config) {
        super(config);
    }
    
    public Z_DataCodeGroupItemDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_DATA_CODE_GROUP_ITEM' (" + //
                "'ITEM_ID' TEXT NOT NULL ," + // 0: Item_ID
                "'DATA_CODE_GROUP_ID' INTEGER NOT NULL ," + // 1: DataCodeGroup_ID
                "'ITEM_CD' TEXT," + // 2: Item_CD
                "'SORT_NO_NR' INTEGER NOT NULL ," + // 3: SortNo_NR
                "'NAME_TX' TEXT NOT NULL ," + // 4: Name_TX
                "'ALARM_LEVEL_ID' INTEGER," + // 5: AlarmLevel_ID
                "'STATUS_CD' TEXT NOT NULL );"); // 6: Status_CD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_DATA_CODE_GROUP_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_DataCodeGroupItem entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getItem_ID());
        stmt.bindLong(2, entity.getDataCodeGroup_ID());
 
        String Item_CD = entity.getItem_CD();
        if (Item_CD != null) {
            stmt.bindString(3, Item_CD);
        }
        stmt.bindLong(4, entity.getSortNo_NR());
        stmt.bindString(5, entity.getName_TX());
 
        Integer AlarmLevel_ID = entity.getAlarmLevel_ID();
        if (AlarmLevel_ID != null) {
            stmt.bindLong(6, AlarmLevel_ID);
        }
        stmt.bindString(7, entity.getStatus_CD());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_DataCodeGroupItem readEntity(Cursor cursor, int offset) {
        Z_DataCodeGroupItem entity = new Z_DataCodeGroupItem( //
            cursor.getString(offset + 0), // Item_ID
            cursor.getInt(offset + 1), // DataCodeGroup_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Item_CD
            cursor.getInt(offset + 3), // SortNo_NR
            cursor.getString(offset + 4), // Name_TX
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // AlarmLevel_ID
            cursor.getString(offset + 6) // Status_CD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_DataCodeGroupItem entity, int offset) {
        entity.setItem_ID(cursor.getString(offset + 0));
        entity.setDataCodeGroup_ID(cursor.getInt(offset + 1));
        entity.setItem_CD(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSortNo_NR(cursor.getInt(offset + 3));
        entity.setName_TX(cursor.getString(offset + 4));
        entity.setAlarmLevel_ID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus_CD(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_DataCodeGroupItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_DataCodeGroupItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
