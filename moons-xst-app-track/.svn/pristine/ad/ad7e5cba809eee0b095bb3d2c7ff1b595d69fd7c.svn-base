package com.moons.xst.sqlite;

import java.util.Map;

import android.database.sqlite.SQLiteDatabase;

import com.moons.xst.track.bean.TempMeasureBaseInfo;
import com.moons.xst.track.bean.ProvisionalM;

import com.moons.xst.track.dao.ProvisionalMDao;
import com.moons.xst.track.dao.TempMeasureBaseInfoDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class TempMeasureDaoSession extends AbstractDaoSession {

    private final DaoConfig tempMeasureBaseInfoDaoConfig;
    private final DaoConfig provisionalMDaoConfig;

    private final TempMeasureBaseInfoDao tempMeasureBaseInfoDao;
    private final ProvisionalMDao provisionalMDao;

    public TempMeasureDaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        tempMeasureBaseInfoDaoConfig = daoConfigMap.get(TempMeasureBaseInfoDao.class).clone();
        tempMeasureBaseInfoDaoConfig.initIdentityScope(type);
        
        provisionalMDaoConfig = daoConfigMap.get(ProvisionalMDao.class).clone();
        provisionalMDaoConfig.initIdentityScope(type);
		
        tempMeasureBaseInfoDao = new TempMeasureBaseInfoDao(tempMeasureBaseInfoDaoConfig, this);
        provisionalMDao = new ProvisionalMDao(provisionalMDaoConfig, this);
		
        registerDao(TempMeasureBaseInfo.class, tempMeasureBaseInfoDao);
        registerDao(ProvisionalM.class, provisionalMDao);
    }
    
    private int _lineID = 0;

	public void setLineID(Integer lineID) {
		_lineID = lineID;
	}

	public int getLineID() {
		return _lineID;
	}
    
    public void clear() {
    	tempMeasureBaseInfoDaoConfig.getIdentityScope().clear();
    	provisionalMDaoConfig.getIdentityScope().clear();
    }

    public TempMeasureBaseInfoDao getTempMeasureBaseInfoDao() {
        return tempMeasureBaseInfoDao;
    }
    
    public ProvisionalMDao getProvisionalMDao() {
    	return provisionalMDao;
    }
}
