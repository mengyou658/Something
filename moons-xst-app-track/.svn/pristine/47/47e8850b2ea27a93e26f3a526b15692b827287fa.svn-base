package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.SRinLKControlPointRel;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SRIN_LKCONTROL_POINT_REL.
*/
public class SRinLKControlPointRelDao extends AbstractDao<SRinLKControlPointRel, Void> {

    public static final String TABLENAME = "SRINLKCONTROLPOINTREL";

    /**
     * Properties of entity SRinLKControlPointRel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LKControlPoint_ID = new Property(0, String.class, "LKControlPoint_ID", false, "LKCONTROLPOINT_ID");
        public final static Property SRControlPoint_ID = new Property(1, String.class, "SRControlPoint_ID", false, "SRCONTROLPOINT_ID");
    };


    public SRinLKControlPointRelDao(DaoConfig config) {
        super(config);
    }
    
    public SRinLKControlPointRelDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SRIN_LKCONTROL_POINT_REL' (" + //
                "'LKCONTROL_POINT_ID' TEXT NOT NULL ," + // 0: LKControlPoint_ID
                "'SRCONTROL_POINT_ID' TEXT NOT NULL );"); // 1: SRControlPoint_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SRIN_LKCONTROL_POINT_REL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SRinLKControlPointRel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLKControlPoint_ID());
        stmt.bindString(2, entity.getSRControlPoint_ID());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SRinLKControlPointRel readEntity(Cursor cursor, int offset) {
        SRinLKControlPointRel entity = new SRinLKControlPointRel( //
            cursor.getString(offset + 0), // LKControlPoint_ID
            cursor.getString(offset + 1) // SRControlPoint_ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SRinLKControlPointRel entity, int offset) {
        entity.setLKControlPoint_ID(cursor.getString(offset + 0));
        entity.setSRControlPoint_ID(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SRinLKControlPointRel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SRinLKControlPointRel entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
