package com.moons.xst.track.communication;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.DecimalFormat;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.moons.xst.buss.InitDJsqlite;
import com.moons.xst.buss.OperateResultHelper;
import com.moons.xst.track.AppConfig;
import com.moons.xst.track.AppConst;
import com.moons.xst.track.AppContext;
import com.moons.xst.track.R;
import com.moons.xst.track.bean.ResponseLogInfo;
import com.moons.xst.track.bean.ReturnResultInfo;
import com.moons.xst.track.common.FileUtils;
import com.moons.xst.track.common.ResponseLogInfoHelper;
import com.moons.xst.track.common.UIHelper;

public class OperateBillDownLoad {

	private Context mContext;

	private static final int DOWN_NOSDCARD = 0;
	private static final int DOWN_UPDATE = 1;
	private static final int DOWN_OVER = 2;

	private static final int DIALOG_TYPE_FAIL = 1;
	private static final int DIALOG_TYPE_FAIL_WS = 2;

	private static final int UPLOADING_FAILURE = 0;// 上传失败
	private static final int DOWNLOAD_FAILURE = 1;// 下载失败

	private static OperateBillDownLoad operateBillDownLoad;

	// 终止标记
	private boolean interceptFlag;

	// 下载对话框
	com.moons.xst.track.widget.AlertDialog Dialog;
	// 进度条
	private ProgressBar mProgress;
	// 显示下载数值
	private TextView mProgressText;
	// 查询动画
	private ProgressDialog mProDialog;
	// 错误对话框
	private com.moons.xst.track.widget.AlertDialog FailDialog;
	// 进度值
	private int progress;
	// 下载线程
	private Thread downLoadThread;

	// 返回的数据库url
	private String dbUrl = "";
	// 下载数据库文件保存路径
	private String savePath = "";
	// DB保存完整路径
	private String dbFilePath = "";
	// 临时下载文件路径
	private String tmpFilePath = "";
	// 下载文件大小
	private String dbFileSize;
	// 已下载文件大小
	private String tmpFileSize;
	InitDJsqlite init = new InitDJsqlite();

	public static OperateBillDownLoad getOperateBillDownLoad() {
		if (operateBillDownLoad == null) {
			operateBillDownLoad = new OperateBillDownLoad();
		}
		operateBillDownLoad.interceptFlag = false;
		return operateBillDownLoad;
	}

	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case DOWN_UPDATE:
				mProgress.setProgress(progress);
				mProgressText.setText(tmpFileSize + "/" + dbFileSize);
				break;
			case DOWN_OVER:
				Dialog.dismiss();
				((AppContext) mContext.getApplicationContext()).refreshTwoBil();
				break;
			case DOWN_NOSDCARD:
				Dialog.dismiss();
				Toast.makeText(
						mContext,
						mContext.getString(R.string.operateDownLoad_cannot_download_hint),
						3000).show();
				break;
			}			
		};
	};

	private Handler uploading = new Handler() {
		public void handleMessage(Message msg) {
			if (msg.what == 0) {// 上传失败
				// 关闭并释放进度条对话框
				if (mProDialog != null) {
					mProDialog.dismiss();
					mProDialog = null;
				}
				showFailDialog(msg.obj.toString(), UPLOADING_FAILURE);
			}
			if (msg.what == 1) {// 上传成功
				// 上传成功清空OperateBill文件夹
				String path = AppConst.TwoTicketRecordPath();
				com.moons.xst.track.common.FileUtils.clearFileWithPath(path);
				mProDialog.setMessage(mContext
						.getString(R.string.download_state_encode));
				if (msg.arg1 == 1) {// 上传成功
					UIHelper.ToastMessage(
							mContext,
							mContext.getString(R.string.cumm_cummdownload_uploadfinished));
				}
				encodeAndDownloadOperateBill(mContext, null, false);
			}
		}
	};

	// 上传操作票
	public void uploadingData(Context context) throws InterruptedException {
		mContext = context;
		if (mProDialog == null) {
			mProDialog = ProgressDialog
					.show(mContext,
							null,
							mContext.getString(R.string.twobill_operate_uploading_hint),
							true, true);
			mProDialog.setOnCancelListener(new OnCancelListener() {

				@Override
				public void onCancel(DialogInterface dialog) {
					// TODO 自动生成的方法存根
					mProDialog.dismiss();
					mProDialog = null;
				}
			});
			mProDialog.setCanceledOnTouchOutside(false);
			mProDialog.setCancelable(false);
		} else if (mProDialog.isShowing()
				|| (FailDialog != null && FailDialog.isShowing()))
			return;
		String DataBaseName = AppConst.TwoTicketRecordPath() + "D-5.sdf";
		if (!FileUtils.checkFileExists(DataBaseName)) {
			Message msg = Message.obtain();
			msg.what = 1;
			uploading.sendMessage(msg);
			return;
		}
		new Thread() {
			public void run() {
				try {
					Message _msg = Message.obtain();
					if (!WebserviceFactory.checkWS()) {
						_msg.what = 0;
						_msg.obj = mContext
								.getString(R.string.setting_sys_aboutus_checkupdata_webaddresscanotuse);
						_msg.arg1 = 0;
						uploading.sendMessage(_msg);
						return;
					}

					// 操作票结果上传判断，是否有操作票的操作项未完成
					boolean res = OperateResultHelper.GetIntance()
							.operBillCanUpload(mContext);
					if (!res) {
						_msg.what = 0;
						_msg.obj = mContext
								.getString(R.string.cumm_cummdownload_operatetickethasunfinished_promptinfo);
						uploading.sendMessage(_msg);
						return;
					}

					String json = OperateResultHelper.GetIntance()
							.getOperateJson(mContext);
					if (json.contains("transform json error")) {
						_msg.what = 0;
						_msg.obj = json;
						return;
					}
					ReturnResultInfo detail = WebserviceFactory
							.OperateUploading(mContext, json);
					_msg = Message.obtain();
					if (detail.getResult_YN()) {
						_msg.what = 1;
						_msg.arg1 = 1;
						// 插入操作日志
						ResponseLogInfoHelper.getHelper(AppConfig.COMMTYPE_OPERATEBILL_UPLOADING, 
								true, 
								AppConfig.OPERATEBILL_UPLOADING_SUCCEED,
								AppConst.CommunicationType_Wireless)
								.ResponseLogInfoToServer();
					} else {
						_msg.what = 0;
						_msg.obj = detail.getError_Message_TX();
						// 插入操作日志
						ResponseLogInfoHelper.getHelper(AppConfig.COMMTYPE_OPERATEBILL_UPLOADING, 
								false, 
								AppConfig.OPERATEBILL_UPLOADING_DEFEATED+ "[" + detail.getError_Message_TX()+ "]",
								AppConst.CommunicationType_Wireless)
								.ResponseLogInfoToServer();
					}
					uploading.sendMessage(_msg);
				} catch (Exception e) {
					Message _msg = Message.obtain();
					_msg.what = 0;
					_msg.obj = e;
					uploading.sendMessage(_msg);
				}
			}
		}.start();
	}

	/**
	 * 获取版本号
	 * 
	 * @return1
	 */
	private String getAppVersion() {
		try {
			PackageInfo info = mContext.getPackageManager().getPackageInfo(
					mContext.getPackageName(), 0);
			String verString = info.versionName + "." + info.versionCode;
			verString = verString.replace(".", "-");
			return verString;
		} catch (NameNotFoundException e) {
			return "";
		}
	}

	/**
	 * 标准化并下载操作票
	 * 
	 * @param context
	 * @param isShowMsg
	 *            是否显示提示消息
	 */
	public void encodeAndDownloadOperateBill(final Context context,
			final String billCode, final boolean isShowMsg) {
		this.mContext = context;
		if (isShowMsg) {
			if (mProDialog == null) {
				mProDialog = ProgressDialog.show(mContext, null,
						mContext.getString(R.string.download_state_encode),
						true, true);
				mProDialog.setOnCancelListener(new OnCancelListener() {

					@Override
					public void onCancel(DialogInterface dialog) {
						// TODO 自动生成的方法存根
						mProDialog.dismiss();
						mProDialog = null;
					}
				});
				mProDialog.setCanceledOnTouchOutside(false);
				mProDialog.setCancelable(false);
			} else if (mProDialog.isShowing()
					|| (FailDialog != null && FailDialog.isShowing()))
				return;
		}
		final Handler handler = new Handler() {
			public void handleMessage(Message msg) {
				// 进度条对话框不显示 - 标准化信息也不显示
				if (mProDialog != null && !mProDialog.isShowing()) {
					return;
				}
				// 关闭并释放进度条对话框
				if (mProDialog != null) {
					mProDialog.dismiss();
					mProDialog = null;
				}
				// 开始下载操作票
				if (msg.what == 1) {
					dbUrl = msg.obj.toString();
					showDownloadDialog();
				} // else if (isShowMsg) {
				else {
					showFailDialog(msg.obj.toString(), DOWNLOAD_FAILURE);
				}
				// }
			}
		};
		new Thread() {
			public void run() {
				Message msg = Message.obtain();
				if (!WebserviceFactory.checkWS()) {
					msg.what = -1;
					msg.obj = context
							.getString(R.string.setting_sys_aboutus_checkupdata_webaddresscanotuse);
					handler.sendMessage(msg);
					return;
				}
				try {
					ReturnResultInfo detail = WebserviceFactory
							.encodeOperateBillInfo(mContext, billCode);

					if (!detail.getResult_YN()) {
						msg.what = 0;
						msg.obj = detail.getError_Message_TX();
					} else {
						msg.what = 1;
						msg.obj = detail.getResult_Content_TX();
					}
				} catch (Exception e) {
					msg.what = 0;
					msg.obj = e;
				}
				handler.sendMessage(msg);
			}
		}.start();
	}

	/**
	 * 显示'已经是最新'或者'无法获取版本信息'对话框
	 */
	private void showFailDialog(String msg, int type) {
		try {

			if (FailDialog != null) {
				// 关闭并释放之前的对话框
				FailDialog.dismiss();
				FailDialog = null;
			}
			if (mContext == null)
				return;
			String message = "";
			if (type == UPLOADING_FAILURE) {
				message = mContext
						.getString(R.string.cumm_cummdownload_uploadresultfilefailed);
			}
			if (type == DOWNLOAD_FAILURE) {
				message = mContext.getString(R.string.download_state_downErr);
			}

			LayoutInflater factory = LayoutInflater.from(mContext);
			final View view = factory.inflate(R.layout.textview_layout, null);
			FailDialog = new com.moons.xst.track.widget.AlertDialog(mContext)
					.builder()
					.setTitle(mContext.getString(R.string.datasync_msg))
					.setView(view)
					.setMsg(message + "\n" + msg)
					.setPositiveButton(mContext.getString(R.string.sure),
							new android.view.View.OnClickListener() {
								@Override
								public void onClick(View v) {

								}
							});
			FailDialog.show();

		} catch (Exception e) {
			// TODO: handle exception
		}
	}



	/**
	 * 显示下载对话框
	 */
	public void showDownloadDialog() {
		LayoutInflater factory = LayoutInflater.from(mContext);
		final View view = factory.inflate(R.layout.progressbar_layout, null);
		mProgressText = (TextView) view.findViewById(R.id.update_progress_text);
		mProgress = (ProgressBar) view.findViewById(R.id.update_progress);

		Dialog = new com.moons.xst.track.widget.AlertDialog(mContext)
				.builder()
				.setTitle(mContext.getString(R.string.datasync_msg))
				.setView(view)
				.setPositiveButton(mContext.getString(R.string.cancel),
						new OnClickListener() {
							@Override
							public void onClick(View v) {
								interceptFlag = true;
							}
						}).setCancelable(false)
				.setCanceledOnTouchOutside(false);
		Dialog.show();

		if (!((Activity) mContext).isFinishing()) {
			Dialog.show();
			downloadDB();
		}
	}

	/**
	 * 下载apk
	 * 
	 * @param url
	 */
	private void downloadDB() {
		downLoadThread = new Thread(mdownDBRunnable);
		downLoadThread.start();
	}

	private Runnable mdownDBRunnable = new Runnable() {
		@Override
		public void run() {
			try {

				String dbName = "OperateBill.sdf";
				String tmpDB = "OperateBill.tmp";
				// 判断是否挂载了SD卡
				String storageState = Environment.getExternalStorageState();
				if (storageState.equals(Environment.MEDIA_MOUNTED)) {
					savePath = AppConst.XSTDBPath();
					File file = new File(savePath);
					if (!file.exists()) {
						file.mkdirs();
					}
					dbFilePath = savePath + dbName;
					tmpFilePath = savePath + tmpDB;
				}

				// 没有挂载SD卡，无法下载文件
				if (dbFilePath == null || dbFilePath == "") {
					mHandler.sendEmptyMessage(DOWN_NOSDCARD);
					return;
				}

				File dbFile = new File(dbFilePath);
				if (dbFile.exists())
					dbFile.delete();

				// 输出临时下载文件
				File tmpFile = new File(tmpFilePath);
				FileOutputStream fos = new FileOutputStream(tmpFile);

				URL url = new URL(dbUrl);
				HttpURLConnection conn = (HttpURLConnection) url
						.openConnection();
				// conn.connect();
				conn.setRequestProperty("Accept-Encoding", "identity");
				int length = conn.getContentLength();
				InputStream is = conn.getInputStream();

				// 显示文件大小格式：2个小数点显示
				DecimalFormat df = new DecimalFormat("0.00");
				// 进度条下面显示的总文件大小
				dbFileSize = df.format((float) length / 1024 / 1024) + "MB";

				int count = 0;
				byte buf[] = new byte[1024];

				do {
					int numread = is.read(buf);
					count += numread;
					// 进度条下面显示的当前下载文件大小
					tmpFileSize = df.format((float) count / 1024 / 1024) + "MB";
					// 当前进度值
					progress = (int) (((float) count / length) * 100);
					// 更新进度
					mHandler.sendEmptyMessage(DOWN_UPDATE);
					if (numread <= 0) {
						// 下载完成 - 将临时下载文件转成APK文件
						if (tmpFile.renameTo(dbFile)) {
							mHandler.sendEmptyMessage(DOWN_OVER);
							
							// 插入操作日志
							ResponseLogInfoHelper.getHelper(AppConfig.COMMTYPE_OPERATEBILL_DOWNLOAD, 
									true, 
									AppConfig.OPERATEBILL_DOWNLOAD_SUCCEED
										+ "[" + dbUrl + "]",
									AppConst.CommunicationType_Wireless)
									.ResponseLogInfoToServer();
						}
						break;
					}
					fos.write(buf, 0, numread);
				} while (!interceptFlag);// 点击取消就停止下载

				fos.close();
				is.close();
			} catch (Exception e) {
				e.printStackTrace();
				
				// 插入操作日志
				ResponseLogInfoHelper.getHelper(AppConfig.COMMTYPE_OPERATEBILL_DOWNLOAD, 
						false, 
						AppConfig.OPERATEBILL_DOWNLOAD_DEFEATED + "["
							+ dbUrl + "]" + "[" + e.toString() + "]",
						AppConst.CommunicationType_Wireless)
						.ResponseLogInfoToServer();
			}
		}
	};

	public void destroy() {
		if (mProDialog != null)
			mProDialog.dismiss();
		if (Dialog != null)
			Dialog.dismiss();
	}
}