package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_WorkDate;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_WORK_DATE.
*/
public class Z_WorkDateDao extends AbstractDao<Z_WorkDate, Void> {

    public static final String TABLENAME = "Z_WORKDATE";

    /**
     * Properties of entity Z_WorkDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Year_NR = new Property(0, int.class, "Year_NR", false, "YEAR_NR");
        public final static Property Month_NR = new Property(1, int.class, "Month_NR", false, "MONTH_NR");
        public final static Property Day_TX = new Property(2, String.class, "Day_TX", false, "DAY_TX");
    };


    public Z_WorkDateDao(DaoConfig config) {
        super(config);
    }
    
    public Z_WorkDateDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_WORK_DATE' (" + //
                "'YEAR_NR' INTEGER NOT NULL ," + // 0: Year_NR
                "'MONTH_NR' INTEGER NOT NULL ," + // 1: Month_NR
                "'DAY_TX' TEXT NOT NULL );"); // 2: Day_TX
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_WORK_DATE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_WorkDate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getYear_NR());
        stmt.bindLong(2, entity.getMonth_NR());
        stmt.bindString(3, entity.getDay_TX());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_WorkDate readEntity(Cursor cursor, int offset) {
        Z_WorkDate entity = new Z_WorkDate( //
            cursor.getInt(offset + 0), // Year_NR
            cursor.getInt(offset + 1), // Month_NR
            cursor.getString(offset + 2) // Day_TX
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_WorkDate entity, int offset) {
        entity.setYear_NR(cursor.getInt(offset + 0));
        entity.setMonth_NR(cursor.getInt(offset + 1));
        entity.setDay_TX(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_WorkDate entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_WorkDate entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
