package com.moons.xst.track.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.baidu.navisdk.util.common.StringUtils;
import com.moons.xst.sqlite.OverhaulDaoSession;
import com.moons.xst.track.bean.OverhaulUser;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table JX_USER.
 */
public class OverhaulUserDao extends AbstractDao<OverhaulUser, Void> {

	public static final String TABLENAME = "JX_User";

	/**
	 * Properties of entity JX_User.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property AppUser_ID = new Property(0, String.class,
				"AppUser_ID", false, "APP_USER_ID");
		public final static Property AppUser_CD = new Property(1, String.class,
				"AppUser_CD", false, "APP_USER_CD");
		public final static Property AppAccount_TX = new Property(2,
				String.class, "AppAccount_TX", false, "APP_ACCOUNT_TX");
		public final static Property Name_TX = new Property(3, String.class,
				"Name_TX", false, "NAME_TX");
		public final static Property XJQPWD_TX = new Property(4, String.class,
				"XJQPWD_TX", false, "XJQPWD_TX");
		public final static Property DEPT_ID = new Property(5, Integer.class,
				"DEPT_ID", false, "DEPT_ID");
		public final static Property DEPT_CD = new Property(6, String.class,
				"DEPT_CD", false, "DEPT_CD");
		public final static Property DEPTNAME_TX = new Property(7,
				String.class, "DEPTNAME_TX", false, "DEPTNAME_TX");
	};

	public OverhaulUserDao(DaoConfig config) {
		super(config);
	}

	public OverhaulUserDao(DaoConfig config, OverhaulDaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'JX_USER' (" + //
				"'APP_USER_ID' TEXT NOT NULL ," + // 0: AppUser_ID
				"'APP_USER_CD' TEXT," + // 1: AppUser_CD
				"'APP_ACCOUNT_TX' TEXT NOT NULL ," + // 2: AppAccount_TX
				"'NAME_TX' TEXT NOT NULL ," + // 3: Name_TX
				"'XJQPWD_TX' TEXT," + // 4: XJQPWD_TX
				"'DEPT_ID' INTEGER," + // 5: DEPT_ID
				"'DEPT_CD' TEXT," + // 6: DEPT_CD
				"'DEPTNAME_TX' TEXT);"); // 7: DEPTNAME_TX
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'JX_User'";
		db.execSQL(sql);
	}

	public List<OverhaulUser> LoginSelect(String account, String pwd) {
		String sql = "select * from JX_User WHERE AppAccount_TX='" + account
				+ "' and XJQPWD_TX='" + pwd + "'";
		Cursor cursor = db.rawQuery(sql, null);
		return loadAllAndCloseCursor(cursor);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, OverhaulUser entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getAppUser_ID());

		String AppUser_CD = entity.getAppUser_CD();
		if (AppUser_CD != null) {
			stmt.bindString(2, AppUser_CD);
		}
		stmt.bindString(3, entity.getAppAccount_TX());
		stmt.bindString(4, entity.getName_TX());

		String XJQPWD_TX = entity.getXJQPWD_TX();
		if (XJQPWD_TX != null) {
			stmt.bindString(5, XJQPWD_TX);
		}

		Integer DEPT_ID = entity.getDEPT_ID();
		if (DEPT_ID != null) {
			stmt.bindLong(6, DEPT_ID);
		}

		String DEPT_CD = entity.getDEPT_CD();
		if (DEPT_CD != null) {
			stmt.bindString(7, DEPT_CD);
		}

		String DEPTNAME_TX = entity.getDEPTNAME_TX();
		if (DEPTNAME_TX != null) {
			stmt.bindString(8, DEPTNAME_TX);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public OverhaulUser readEntity(Cursor cursor, int offset) {
		OverhaulUser entity = new OverhaulUser(
				//
				cursor.getString(offset + 0), // AppUser_ID
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AppUser_CD
				cursor.getString(offset + 2), // AppAccount_TX
				cursor.getString(offset + 3), // Name_TX
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // XJQPWD_TX
				cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // DEPT_ID
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DEPT_CD
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // DEPTNAME_TX
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, OverhaulUser entity, int offset) {
		entity.setAppUser_ID(cursor.getString(offset + 0));
		entity.setAppUser_CD(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setAppAccount_TX(cursor.getString(offset + 2));
		entity.setName_TX(cursor.getString(offset + 3));
		entity.setXJQPWD_TX(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setDEPT_ID(cursor.isNull(offset + 5) ? null : cursor
				.getInt(offset + 5));
		entity.setDEPT_CD(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setDEPTNAME_TX(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(OverhaulUser entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(OverhaulUser entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
