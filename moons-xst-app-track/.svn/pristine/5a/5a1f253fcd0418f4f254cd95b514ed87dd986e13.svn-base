package com.moons.xst.track.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.moons.xst.sqlite.DJDAOSession;
import com.moons.xst.track.bean.Z_DJ_Cycle;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Z_DJ_CYCLE.
*/
public class Z_DJ_CycleDao extends AbstractDao<Z_DJ_Cycle, Void> {

    public static final String TABLENAME = "Z_DJ_CYCLE";

    /**
     * Properties of entity Z_DJ_Cycle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cycle_ID = new Property(0, String.class, "Cycle_ID", false, "CYCLE_ID");
        public final static Property Name_TX = new Property(1, String.class, "Name_TX", false, "NAME_TX");
        public final static Property BoundValue_NR = new Property(2, Integer.class, "BoundValue_NR", false, "BOUNDVALUE_NR");
        public final static Property BoundType_CD = new Property(3, String.class, "BoundType_CD", false, "BOUNDTYPE_CD");
        public final static Property BaseDate_DT = new Property(4, String.class, "BaseDate_DT", false, "BASEDATE_DT");
        public final static Property StartWay_CD = new Property(5, String.class, "StartWay_CD", false, "STARTWAY_CD");
    };


    public Z_DJ_CycleDao(DaoConfig config) {
        super(config);
    }
    
    public Z_DJ_CycleDao(DaoConfig config, DJDAOSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Z_DJ_CYCLE' (" + //
                "'CYCLE_ID' TEXT NOT NULL ," + // 0: Cycle_ID
                "'NAME_TX' TEXT NOT NULL ," + // 1: Name_TX
                "'BOUND_VALUE_NR' INTEGER," + // 2: BoundValue_NR
                "'BOUND_TYPE_CD' TEXT NOT NULL ," + // 3: BoundType_CD
                "'BASE_DATE_DT' TEXT NOT NULL ," + // 4: BaseDate_DT
                "'START_WAY_CD' TEXT NOT NULL );"); // 5: StartWay_CD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Z_DJ_CYCLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Z_DJ_Cycle entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCycle_ID());
        stmt.bindString(2, entity.getName_TX());
 
        Integer BoundValue_NR = entity.getBoundValue_NR();
        if (BoundValue_NR != null) {
            stmt.bindLong(3, BoundValue_NR);
        }
        stmt.bindString(4, entity.getBoundType_CD());
        stmt.bindString(5, entity.getBaseDate_DT());
        stmt.bindString(6, entity.getStartWay_CD());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Z_DJ_Cycle readEntity(Cursor cursor, int offset) {
        Z_DJ_Cycle entity = new Z_DJ_Cycle( //
            cursor.getString(offset + 0), // Cycle_ID
            cursor.getString(offset + 1), // Name_TX
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // BoundValue_NR
            cursor.getString(offset + 3), // BoundType_CD
            cursor.getString(offset + 4), // BaseDate_DT
            cursor.getString(offset + 5) // StartWay_CD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Z_DJ_Cycle entity, int offset) {
        entity.setCycle_ID(cursor.getString(offset + 0));
        entity.setName_TX(cursor.getString(offset + 1));
        entity.setBoundValue_NR(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBoundType_CD(cursor.getString(offset + 3));
        entity.setBaseDate_DT(cursor.getString(offset + 4));
        entity.setStartWay_CD(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Z_DJ_Cycle entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Z_DJ_Cycle entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
